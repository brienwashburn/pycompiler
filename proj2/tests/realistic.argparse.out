(Module
 (Expr
  (Str
   "Command-line parsing library\n\nThis module is an optparse-inspired command-line parsing library that:\n\n    - handles both optional and positional arguments\n    - produces highly informative usage messages\n    - supports parsers that dispatch to sub-parsers\n\nThe following is a simple usage example that sums integers from the\ncommand-line and writes the result to a file::\n\n    parser = argparse.ArgumentParser(\n        description='sum the integers at the command line')\n    parser.add_argument(\n        'integers', metavar='int', nargs='+', type=int,\n        help='an integer to be summed')\n    parser.add_argument(\n        '--log', default=sys.stdout, type=argparse.FileType('w'),\n        help='the file where the sum should be written')\n    args = parser.parse_args()\n    args.log.write('%s' % sum(args.integers))\n    args.log.close()\n\nThe module contains the following public classes:\n\n    - ArgumentParser -- The main entry point for command-line parsing. As the\n        example above shows, the add_argument() method is used to populate\n        the parser with actions for optional and positional arguments. Then\n        the parse_args() method is invoked to convert the args at the\n        command-line into an object with attributes.\n\n    - ArgumentError -- The exception raised by ArgumentParser objects when\n        there are errors with the parser's actions. Errors raised while\n        parsing the command-line are caught by ArgumentParser and emitted\n        as command-line messages.\n\n    - FileType -- A factory for defining types of files to be created. As the\n        example above shows, instances of FileType are typically passed as\n        the type= argument of add_argument() calls.\n\n    - Action -- The base class for parser actions. Typically actions are\n        selected by passing strings like 'store_true' or 'append_const' to\n        the action= argument of add_argument(). However, for greater\n        customization of ArgumentParser actions, subclasses of Action may\n        be defined and passed as the action= argument.\n\n    - HelpFormatter, RawDescriptionHelpFormatter, RawTextHelpFormatter,\n        ArgumentDefaultsHelpFormatter -- Formatter classes which\n        may be passed as the formatter_class= argument to the\n        ArgumentParser constructor. HelpFormatter is the default,\n        RawDescriptionHelpFormatter and RawTextHelpFormatter tell the parser\n        not to change the formatting for help text, and\n        ArgumentDefaultsHelpFormatter adds information about argument defaults\n        to the help.\n\nAll other classes in this module are considered implementation details.\n(Also note that HelpFormatter and RawDescriptionHelpFormatter are only\nconsidered public as object names -- the API of the formatter objects is\nstill considered an implementation detail.)\n"))
 (Assign (targets (Name __version__)) (value (Str "1.1")))
 (Assign
  (targets (Name __all__))
  (value
   (List
    (Str "ArgumentParser")
    (Str "ArgumentError")
    (Str "ArgumentTypeError")
    (Str "FileType")
    (Str "HelpFormatter")
    (Str "ArgumentDefaultsHelpFormatter")
    (Str "RawDescriptionHelpFormatter")
    (Str "RawTextHelpFormatter")
    (Str "MetavarTypeHelpFormatter")
    (Str "Namespace")
    (Str "Action")
    (Str "ONE_OR_MORE")
    (Str "OPTIONAL")
    (Str "PARSER")
    (Str "REMAINDER")
    (Str "SUPPRESS")
    (Str "ZERO_OR_MORE"))))
 (Import (collections _collections))
 (Import (copy _copy))
 (Import (os _os))
 (Import (re _re))
 (Import (sys _sys))
 (Import (textwrap _textwrap))
 (ImportFrom (module gettext) (names (gettext _) (ngettext #f)) (level 0))
 (Assign (targets (Name SUPPRESS)) (value (Str "==SUPPRESS==")))
 (Assign (targets (Name OPTIONAL)) (value (Str "?")))
 (Assign (targets (Name ZERO_OR_MORE)) (value (Str "*")))
 (Assign (targets (Name ONE_OR_MORE)) (value (Str "+")))
 (Assign (targets (Name PARSER)) (value (Str "A...")))
 (Assign (targets (Name REMAINDER)) (value (Str "...")))
 (Assign
  (targets (Name _UNRECOGNIZED_ARGS_ATTR))
  (value (Str "_unrecognized_args")))
 (ClassDef
  (name _AttributeHolder)
  (bases (Name object))
  (keywords)
  (starargs #f)
  (kwargs #f)
  (body
   (Expr
    (Str
     "Abstract base class that provides __repr__.\n\n    The __repr__ method returns a string in the format::\n        ClassName(attr=name, attr=name, ...)\n    The attributes are determined either by a class-level attribute,\n    '_kwarg_names', or by inspecting the instance __dict__.\n    "))
   (FunctionDef
    (name __repr__)
    (args
     (Arguments
      (args self)
      (arg-types #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f)))
    (body
     (Assign
      (targets (Name type_name))
      (value
       (Attribute
        (Call
         (func (Name type))
         (args (Name self))
         (keywords)
         (starargs #f)
         (kwargs #f))
        __name__)))
     (Assign (targets (Name arg_strings)) (value (List)))
     (For
      (target (Name arg))
      (iter
       (Call
        (func (Attribute (Name self) _get_args))
        (args)
        (keywords)
        (starargs #f)
        (kwargs #f)))
      (body
       (Expr
        (Call
         (func (Attribute (Name arg_strings) append))
         (args
          (Call
           (func (Name repr))
           (args (Name arg))
           (keywords)
           (starargs #f)
           (kwargs #f)))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (orelse))
     (For
      (target (Tuple (Name name) (Name value)))
      (iter
       (Call
        (func (Attribute (Name self) _get_kwargs))
        (args)
        (keywords)
        (starargs #f)
        (kwargs #f)))
      (body
       (Expr
        (Call
         (func (Attribute (Name arg_strings) append))
         (args (BinOp (Str "%s=%r") Mod (Tuple (Name name) (Name value))))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (orelse))
     (Return
      (BinOp
       (Str "%s(%s)")
       Mod
       (Tuple
        (Name type_name)
        (Call
         (func (Attribute (Str ", ") join))
         (args (Name arg_strings))
         (keywords)
         (starargs #f)
         (kwargs #f))))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _get_kwargs)
    (args
     (Arguments
      (args self)
      (arg-types #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f)))
    (body
     (Return
      (Call
       (func (Name sorted))
       (args
        (Call
         (func (Attribute (Attribute (Name self) __dict__) items))
         (args)
         (keywords)
         (starargs #f)
         (kwargs #f)))
       (keywords)
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _get_args)
    (args
     (Arguments
      (args self)
      (arg-types #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f)))
    (body (Return (List)))
    (decorator_list)
    (returns #f)))
  (decorator_list))
 (FunctionDef
  (name _ensure_value)
  (args
   (Arguments
    (args namespace name value)
    (arg-types #f #f #f)
    (vararg #f)
    (kwonlyargs)
    (kwonlyarg-types)
    (kw_defaults)
    (kwarg #f)
    (defaults #f #f #f)))
  (body
   (If
    (test
     (Compare
      (left
       (Call
        (func (Name getattr))
        (args (Name namespace) (Name name) (NameConstant None))
        (keywords)
        (starargs #f)
        (kwargs #f)))
      (ops Is)
      (comparators (NameConstant None))))
    (body
     (Expr
      (Call
       (func (Name setattr))
       (args (Name namespace) (Name name) (Name value))
       (keywords)
       (starargs #f)
       (kwargs #f))))
    (orelse))
   (Return
    (Call
     (func (Name getattr))
     (args (Name namespace) (Name name))
     (keywords)
     (starargs #f)
     (kwargs #f))))
  (decorator_list)
  (returns #f))
 (ClassDef
  (name HelpFormatter)
  (bases (Name object))
  (keywords)
  (starargs #f)
  (kwargs #f)
  (body
   (Expr
    (Str
     "Formatter for generating usage messages and argument help strings.\n\n    Only the name of this class is considered a public API. All the methods\n    provided by the class are considered an implementation detail.\n    "))
   (FunctionDef
    (name __init__)
    (args
     (Arguments
      (args self prog indent_increment max_help_position width)
      (arg-types #f #f #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f (Num 2) (Num 24) (NameConstant None))))
    (body
     (If
      (test
       (Compare
        (left (Name width))
        (ops Is)
        (comparators (NameConstant None))))
      (body
       (Try
        (body
         (Assign
          (targets (Name width))
          (value
           (Call
            (func (Name int))
            (args
             (Subscript
              (Attribute (Name _os) environ)
              (Index (Str "COLUMNS"))))
            (keywords)
            (starargs #f)
            (kwargs #f)))))
        (handlers
         (except
          (Tuple (Name KeyError) (Name ValueError))
          #f
          (Assign (targets (Name width)) (value (Num 80)))))
        (orelse)
        (finalbody))
       (AugAssign (Name width) Sub (Num 2)))
      (orelse))
     (Assign (targets (Attribute (Name self) _prog)) (value (Name prog)))
     (Assign
      (targets (Attribute (Name self) _indent_increment))
      (value (Name indent_increment)))
     (Assign
      (targets (Attribute (Name self) _max_help_position))
      (value (Name max_help_position)))
     (Assign
      (targets (Attribute (Name self) _max_help_position))
      (value
       (Call
        (func (Name min))
        (args
         (Name max_help_position)
         (Call
          (func (Name max))
          (args
           (BinOp (Name width) Sub (Num 20))
           (BinOp (Name indent_increment) Mult (Num 2)))
          (keywords)
          (starargs #f)
          (kwargs #f)))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (Assign (targets (Attribute (Name self) _width)) (value (Name width)))
     (Assign (targets (Attribute (Name self) _current_indent)) (value (Num 0)))
     (Assign (targets (Attribute (Name self) _level)) (value (Num 0)))
     (Assign
      (targets (Attribute (Name self) _action_max_length))
      (value (Num 0)))
     (Assign
      (targets (Attribute (Name self) _root_section))
      (value
       (Call
        (func (Attribute (Name self) _Section))
        (args (Name self) (NameConstant None))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (Assign
      (targets (Attribute (Name self) _current_section))
      (value (Attribute (Name self) _root_section)))
     (Assign
      (targets (Attribute (Name self) _whitespace_matcher))
      (value
       (Call
        (func (Attribute (Name _re) compile))
        (args (Str "\\s+"))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (Assign
      (targets (Attribute (Name self) _long_break_matcher))
      (value
       (Call
        (func (Attribute (Name _re) compile))
        (args (Str "\\n\\n\\n+"))
        (keywords)
        (starargs #f)
        (kwargs #f)))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _indent)
    (args
     (Arguments
      (args self)
      (arg-types #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f)))
    (body
     (AugAssign
      (Attribute (Name self) _current_indent)
      Add
      (Attribute (Name self) _indent_increment))
     (AugAssign (Attribute (Name self) _level) Add (Num 1)))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _dedent)
    (args
     (Arguments
      (args self)
      (arg-types #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f)))
    (body
     (AugAssign
      (Attribute (Name self) _current_indent)
      Sub
      (Attribute (Name self) _indent_increment))
     (Assert
      (Compare
       (left (Attribute (Name self) _current_indent))
       (ops GtE)
       (comparators (Num 0)))
      (Str "Indent decreased below 0."))
     (AugAssign (Attribute (Name self) _level) Sub (Num 1)))
    (decorator_list)
    (returns #f))
   (ClassDef
    (name _Section)
    (bases (Name object))
    (keywords)
    (starargs #f)
    (kwargs #f)
    (body
     (FunctionDef
      (name __init__)
      (args
       (Arguments
        (args self formatter parent heading)
        (arg-types #f #f #f #f)
        (vararg #f)
        (kwonlyargs)
        (kwonlyarg-types)
        (kw_defaults)
        (kwarg #f)
        (defaults #f #f #f (NameConstant None))))
      (body
       (Assign
        (targets (Attribute (Name self) formatter))
        (value (Name formatter)))
       (Assign (targets (Attribute (Name self) parent)) (value (Name parent)))
       (Assign
        (targets (Attribute (Name self) heading))
        (value (Name heading)))
       (Assign (targets (Attribute (Name self) items)) (value (List))))
      (decorator_list)
      (returns #f))
     (FunctionDef
      (name format_help)
      (args
       (Arguments
        (args self)
        (arg-types #f)
        (vararg #f)
        (kwonlyargs)
        (kwonlyarg-types)
        (kw_defaults)
        (kwarg #f)
        (defaults #f)))
      (body
       (If
        (test
         (Compare
          (left (Attribute (Name self) parent))
          (ops IsNot)
          (comparators (NameConstant None))))
        (body
         (Expr
          (Call
           (func (Attribute (Attribute (Name self) formatter) _indent))
           (args)
           (keywords)
           (starargs #f)
           (kwargs #f))))
        (orelse))
       (Assign
        (targets (Name join))
        (value (Attribute (Attribute (Name self) formatter) _join_parts)))
       (For
        (target (Tuple (Name func) (Name args)))
        (iter (Attribute (Name self) items))
        (body
         (Expr
          (Call
           (func (Name func))
           (args)
           (keywords)
           (starargs (Name args))
           (kwargs #f))))
        (orelse))
       (Assign
        (targets (Name item_help))
        (value
         (Call
          (func (Name join))
          (args
           (ListComp
            (Call
             (func (Name func))
             (args)
             (keywords)
             (starargs (Name args))
             (kwargs #f))
            (for
             (Tuple (Name func) (Name args))
             in
             (Attribute (Name self) items)
             if)))
          (keywords)
          (starargs #f)
          (kwargs #f))))
       (If
        (test
         (Compare
          (left (Attribute (Name self) parent))
          (ops IsNot)
          (comparators (NameConstant None))))
        (body
         (Expr
          (Call
           (func (Attribute (Attribute (Name self) formatter) _dedent))
           (args)
           (keywords)
           (starargs #f)
           (kwargs #f))))
        (orelse))
       (If
        (test (UnaryOp Not (Name item_help)))
        (body (Return (Str "")))
        (orelse))
       (If
        (test
         (BoolOp
          And
          (Compare
           (left (Attribute (Name self) heading))
           (ops IsNot)
           (comparators (Name SUPPRESS)))
          (Compare
           (left (Attribute (Name self) heading))
           (ops IsNot)
           (comparators (NameConstant None)))))
        (body
         (Assign
          (targets (Name current_indent))
          (value
           (Attribute (Attribute (Name self) formatter) _current_indent)))
         (Assign
          (targets (Name heading))
          (value
           (BinOp
            (Str "%*s%s:\n")
            Mod
            (Tuple
             (Name current_indent)
             (Str "")
             (Attribute (Name self) heading))))))
        (orelse (Assign (targets (Name heading)) (value (Str "")))))
       (Return
        (Call
         (func (Name join))
         (args (List (Str "\n") (Name heading) (Name item_help) (Str "\n")))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (decorator_list)
      (returns #f)))
    (decorator_list))
   (FunctionDef
    (name _add_item)
    (args
     (Arguments
      (args self func args)
      (arg-types #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f #f)))
    (body
     (Expr
      (Call
       (func
        (Attribute
         (Attribute (Attribute (Name self) _current_section) items)
         append))
       (args (Tuple (Name func) (Name args)))
       (keywords)
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name start_section)
    (args
     (Arguments
      (args self heading)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f)))
    (body
     (Expr
      (Call
       (func (Attribute (Name self) _indent))
       (args)
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Assign
      (targets (Name section))
      (value
       (Call
        (func (Attribute (Name self) _Section))
        (args
         (Name self)
         (Attribute (Name self) _current_section)
         (Name heading))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (Expr
      (Call
       (func (Attribute (Name self) _add_item))
       (args (Attribute (Name section) format_help) (List))
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Assign
      (targets (Attribute (Name self) _current_section))
      (value (Name section))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name end_section)
    (args
     (Arguments
      (args self)
      (arg-types #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f)))
    (body
     (Assign
      (targets (Attribute (Name self) _current_section))
      (value (Attribute (Attribute (Name self) _current_section) parent)))
     (Expr
      (Call
       (func (Attribute (Name self) _dedent))
       (args)
       (keywords)
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name add_text)
    (args
     (Arguments
      (args self text)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f)))
    (body
     (If
      (test
       (BoolOp
        And
        (Compare (left (Name text)) (ops IsNot) (comparators (Name SUPPRESS)))
        (Compare
         (left (Name text))
         (ops IsNot)
         (comparators (NameConstant None)))))
      (body
       (Expr
        (Call
         (func (Attribute (Name self) _add_item))
         (args (Attribute (Name self) _format_text) (List (Name text)))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (orelse)))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name add_usage)
    (args
     (Arguments
      (args self usage actions groups prefix)
      (arg-types #f #f #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f #f #f (NameConstant None))))
    (body
     (If
      (test
       (Compare (left (Name usage)) (ops IsNot) (comparators (Name SUPPRESS))))
      (body
       (Assign
        (targets (Name args))
        (value
         (Tuple (Name usage) (Name actions) (Name groups) (Name prefix))))
       (Expr
        (Call
         (func (Attribute (Name self) _add_item))
         (args (Attribute (Name self) _format_usage) (Name args))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (orelse)))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name add_argument)
    (args
     (Arguments
      (args self action)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f)))
    (body
     (If
      (test
       (Compare
        (left (Attribute (Name action) help))
        (ops IsNot)
        (comparators (Name SUPPRESS))))
      (body
       (Assign
        (targets (Name get_invocation))
        (value (Attribute (Name self) _format_action_invocation)))
       (Assign
        (targets (Name invocations))
        (value
         (List
          (Call
           (func (Name get_invocation))
           (args (Name action))
           (keywords)
           (starargs #f)
           (kwargs #f)))))
       (For
        (target (Name subaction))
        (iter
         (Call
          (func (Attribute (Name self) _iter_indented_subactions))
          (args (Name action))
          (keywords)
          (starargs #f)
          (kwargs #f)))
        (body
         (Expr
          (Call
           (func (Attribute (Name invocations) append))
           (args
            (Call
             (func (Name get_invocation))
             (args (Name subaction))
             (keywords)
             (starargs #f)
             (kwargs #f)))
           (keywords)
           (starargs #f)
           (kwargs #f))))
        (orelse))
       (Assign
        (targets (Name invocation_length))
        (value
         (Call
          (func (Name max))
          (args
           (ListComp
            (Call
             (func (Name len))
             (args (Name s))
             (keywords)
             (starargs #f)
             (kwargs #f))
            (for (Name s) in (Name invocations) if)))
          (keywords)
          (starargs #f)
          (kwargs #f))))
       (Assign
        (targets (Name action_length))
        (value
         (BinOp
          (Name invocation_length)
          Add
          (Attribute (Name self) _current_indent))))
       (Assign
        (targets (Attribute (Name self) _action_max_length))
        (value
         (Call
          (func (Name max))
          (args
           (Attribute (Name self) _action_max_length)
           (Name action_length))
          (keywords)
          (starargs #f)
          (kwargs #f))))
       (Expr
        (Call
         (func (Attribute (Name self) _add_item))
         (args (Attribute (Name self) _format_action) (List (Name action)))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (orelse)))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name add_arguments)
    (args
     (Arguments
      (args self actions)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f)))
    (body
     (For
      (target (Name action))
      (iter (Name actions))
      (body
       (Expr
        (Call
         (func (Attribute (Name self) add_argument))
         (args (Name action))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (orelse)))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name format_help)
    (args
     (Arguments
      (args self)
      (arg-types #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f)))
    (body
     (Assign
      (targets (Name help))
      (value
       (Call
        (func (Attribute (Attribute (Name self) _root_section) format_help))
        (args)
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (If
      (test (Name help))
      (body
       (Assign
        (targets (Name help))
        (value
         (Call
          (func (Attribute (Attribute (Name self) _long_break_matcher) sub))
          (args (Str "\n\n") (Name help))
          (keywords)
          (starargs #f)
          (kwargs #f))))
       (Assign
        (targets (Name help))
        (value
         (BinOp
          (Call
           (func (Attribute (Name help) strip))
           (args (Str "\n"))
           (keywords)
           (starargs #f)
           (kwargs #f))
          Add
          (Str "\n")))))
      (orelse))
     (Return (Name help)))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _join_parts)
    (args
     (Arguments
      (args self part_strings)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f)))
    (body
     (Return
      (Call
       (func (Attribute (Str "") join))
       (args
        (ListComp
         (Name part)
         (for
          (Name part)
          in
          (Name part_strings)
          if
          (BoolOp
           And
           (Name part)
           (Compare
            (left (Name part))
            (ops IsNot)
            (comparators (Name SUPPRESS)))))))
       (keywords)
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _format_usage)
    (args
     (Arguments
      (args self usage actions groups prefix)
      (arg-types #f #f #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f #f #f #f)))
    (body
     (If
      (test
       (Compare
        (left (Name prefix))
        (ops Is)
        (comparators (NameConstant None))))
      (body
       (Assign
        (targets (Name prefix))
        (value
         (Call
          (func (Name _))
          (args (Str "usage: "))
          (keywords)
          (starargs #f)
          (kwargs #f)))))
      (orelse))
     (If
      (test
       (Compare
        (left (Name usage))
        (ops IsNot)
        (comparators (NameConstant None))))
      (body
       (Assign
        (targets (Name usage))
        (value
         (BinOp
          (Name usage)
          Mod
          (Call
           (func (Name dict))
           (args)
           (keywords (prog (Attribute (Name self) _prog)))
           (starargs #f)
           (kwargs #f))))))
      (orelse
       (If
        (test
         (BoolOp
          And
          (Compare
           (left (Name usage))
           (ops Is)
           (comparators (NameConstant None)))
          (UnaryOp Not (Name actions))))
        (body
         (Assign
          (targets (Name usage))
          (value
           (BinOp
            (Str "%(prog)s")
            Mod
            (Call
             (func (Name dict))
             (args)
             (keywords (prog (Attribute (Name self) _prog)))
             (starargs #f)
             (kwargs #f))))))
        (orelse
         (If
          (test
           (Compare
            (left (Name usage))
            (ops Is)
            (comparators (NameConstant None))))
          (body
           (Assign
            (targets (Name prog))
            (value
             (BinOp
              (Str "%(prog)s")
              Mod
              (Call
               (func (Name dict))
               (args)
               (keywords (prog (Attribute (Name self) _prog)))
               (starargs #f)
               (kwargs #f)))))
           (Assign (targets (Name optionals)) (value (List)))
           (Assign (targets (Name positionals)) (value (List)))
           (For
            (target (Name action))
            (iter (Name actions))
            (body
             (If
              (test (Attribute (Name action) option_strings))
              (body
               (Expr
                (Call
                 (func (Attribute (Name optionals) append))
                 (args (Name action))
                 (keywords)
                 (starargs #f)
                 (kwargs #f))))
              (orelse
               (Expr
                (Call
                 (func (Attribute (Name positionals) append))
                 (args (Name action))
                 (keywords)
                 (starargs #f)
                 (kwargs #f))))))
            (orelse))
           (Assign
            (targets (Name format))
            (value (Attribute (Name self) _format_actions_usage)))
           (Assign
            (targets (Name action_usage))
            (value
             (Call
              (func (Name format))
              (args
               (BinOp (Name optionals) Add (Name positionals))
               (Name groups))
              (keywords)
              (starargs #f)
              (kwargs #f))))
           (Assign
            (targets (Name usage))
            (value
             (Call
              (func (Attribute (Str " ") join))
              (args
               (ListComp
                (Name s)
                (for
                 (Name s)
                 in
                 (List (Name prog) (Name action_usage))
                 if
                 (Name s))))
              (keywords)
              (starargs #f)
              (kwargs #f))))
           (Assign
            (targets (Name text_width))
            (value
             (BinOp
              (Attribute (Name self) _width)
              Sub
              (Attribute (Name self) _current_indent))))
           (If
            (test
             (Compare
              (left
               (BinOp
                (Call
                 (func (Name len))
                 (args (Name prefix))
                 (keywords)
                 (starargs #f)
                 (kwargs #f))
                Add
                (Call
                 (func (Name len))
                 (args (Name usage))
                 (keywords)
                 (starargs #f)
                 (kwargs #f))))
              (ops Gt)
              (comparators (Name text_width))))
            (body
             (Assign
              (targets (Name part_regexp))
              (value (Str "\\(.*?\\)+|\\[.*?\\]+|\\S+")))
             (Assign
              (targets (Name opt_usage))
              (value
               (Call
                (func (Name format))
                (args (Name optionals) (Name groups))
                (keywords)
                (starargs #f)
                (kwargs #f))))
             (Assign
              (targets (Name pos_usage))
              (value
               (Call
                (func (Name format))
                (args (Name positionals) (Name groups))
                (keywords)
                (starargs #f)
                (kwargs #f))))
             (Assign
              (targets (Name opt_parts))
              (value
               (Call
                (func (Attribute (Name _re) findall))
                (args (Name part_regexp) (Name opt_usage))
                (keywords)
                (starargs #f)
                (kwargs #f))))
             (Assign
              (targets (Name pos_parts))
              (value
               (Call
                (func (Attribute (Name _re) findall))
                (args (Name part_regexp) (Name pos_usage))
                (keywords)
                (starargs #f)
                (kwargs #f))))
             (Assert
              (Compare
               (left
                (Call
                 (func (Attribute (Str " ") join))
                 (args (Name opt_parts))
                 (keywords)
                 (starargs #f)
                 (kwargs #f)))
               (ops Eq)
               (comparators (Name opt_usage))))
             (Assert
              (Compare
               (left
                (Call
                 (func (Attribute (Str " ") join))
                 (args (Name pos_parts))
                 (keywords)
                 (starargs #f)
                 (kwargs #f)))
               (ops Eq)
               (comparators (Name pos_usage))))
             (FunctionDef
              (name get_lines)
              (args
               (Arguments
                (args parts indent prefix)
                (arg-types #f #f #f)
                (vararg #f)
                (kwonlyargs)
                (kwonlyarg-types)
                (kw_defaults)
                (kwarg #f)
                (defaults #f #f (NameConstant None))))
              (body
               (Assign (targets (Name lines)) (value (List)))
               (Assign (targets (Name line)) (value (List)))
               (If
                (test
                 (Compare
                  (left (Name prefix))
                  (ops IsNot)
                  (comparators (NameConstant None))))
                (body
                 (Assign
                  (targets (Name line_len))
                  (value
                   (BinOp
                    (Call
                     (func (Name len))
                     (args (Name prefix))
                     (keywords)
                     (starargs #f)
                     (kwargs #f))
                    Sub
                    (Num 1)))))
                (orelse
                 (Assign
                  (targets (Name line_len))
                  (value
                   (BinOp
                    (Call
                     (func (Name len))
                     (args (Name indent))
                     (keywords)
                     (starargs #f)
                     (kwargs #f))
                    Sub
                    (Num 1))))))
               (For
                (target (Name part))
                (iter (Name parts))
                (body
                 (If
                  (test
                   (BoolOp
                    And
                    (Compare
                     (left
                      (BinOp
                       (BinOp (Name line_len) Add (Num 1))
                       Add
                       (Call
                        (func (Name len))
                        (args (Name part))
                        (keywords)
                        (starargs #f)
                        (kwargs #f))))
                     (ops Gt)
                     (comparators (Name text_width)))
                    (Name line)))
                  (body
                   (Expr
                    (Call
                     (func (Attribute (Name lines) append))
                     (args
                      (BinOp
                       (Name indent)
                       Add
                       (Call
                        (func (Attribute (Str " ") join))
                        (args (Name line))
                        (keywords)
                        (starargs #f)
                        (kwargs #f))))
                     (keywords)
                     (starargs #f)
                     (kwargs #f)))
                   (Assign (targets (Name line)) (value (List)))
                   (Assign
                    (targets (Name line_len))
                    (value
                     (BinOp
                      (Call
                       (func (Name len))
                       (args (Name indent))
                       (keywords)
                       (starargs #f)
                       (kwargs #f))
                      Sub
                      (Num 1)))))
                  (orelse))
                 (Expr
                  (Call
                   (func (Attribute (Name line) append))
                   (args (Name part))
                   (keywords)
                   (starargs #f)
                   (kwargs #f)))
                 (AugAssign
                  (Name line_len)
                  Add
                  (BinOp
                   (Call
                    (func (Name len))
                    (args (Name part))
                    (keywords)
                    (starargs #f)
                    (kwargs #f))
                   Add
                   (Num 1))))
                (orelse))
               (If
                (test (Name line))
                (body
                 (Expr
                  (Call
                   (func (Attribute (Name lines) append))
                   (args
                    (BinOp
                     (Name indent)
                     Add
                     (Call
                      (func (Attribute (Str " ") join))
                      (args (Name line))
                      (keywords)
                      (starargs #f)
                      (kwargs #f))))
                   (keywords)
                   (starargs #f)
                   (kwargs #f))))
                (orelse))
               (If
                (test
                 (Compare
                  (left (Name prefix))
                  (ops IsNot)
                  (comparators (NameConstant None))))
                (body
                 (Assign
                  (targets (Subscript (Name lines) (Index (Num 0))))
                  (value
                   (Subscript
                    (Subscript (Name lines) (Index (Num 0)))
                    (Slice
                     (Call
                      (func (Name len))
                      (args (Name indent))
                      (keywords)
                      (starargs #f)
                      (kwargs #f))
                     #f
                     #f)))))
                (orelse))
               (Return (Name lines)))
              (decorator_list)
              (returns #f))
             (If
              (test
               (Compare
                (left
                 (BinOp
                  (Call
                   (func (Name len))
                   (args (Name prefix))
                   (keywords)
                   (starargs #f)
                   (kwargs #f))
                  Add
                  (Call
                   (func (Name len))
                   (args (Name prog))
                   (keywords)
                   (starargs #f)
                   (kwargs #f))))
                (ops LtE)
                (comparators (BinOp (Num 0.75) Mult (Name text_width)))))
              (body
               (Assign
                (targets (Name indent))
                (value
                 (BinOp
                  (Str " ")
                  Mult
                  (BinOp
                   (BinOp
                    (Call
                     (func (Name len))
                     (args (Name prefix))
                     (keywords)
                     (starargs #f)
                     (kwargs #f))
                    Add
                    (Call
                     (func (Name len))
                     (args (Name prog))
                     (keywords)
                     (starargs #f)
                     (kwargs #f)))
                   Add
                   (Num 1)))))
               (If
                (test (Name opt_parts))
                (body
                 (Assign
                  (targets (Name lines))
                  (value
                   (Call
                    (func (Name get_lines))
                    (args
                     (BinOp (List (Name prog)) Add (Name opt_parts))
                     (Name indent)
                     (Name prefix))
                    (keywords)
                    (starargs #f)
                    (kwargs #f))))
                 (Expr
                  (Call
                   (func (Attribute (Name lines) extend))
                   (args
                    (Call
                     (func (Name get_lines))
                     (args (Name pos_parts) (Name indent))
                     (keywords)
                     (starargs #f)
                     (kwargs #f)))
                   (keywords)
                   (starargs #f)
                   (kwargs #f))))
                (orelse
                 (If
                  (test (Name pos_parts))
                  (body
                   (Assign
                    (targets (Name lines))
                    (value
                     (Call
                      (func (Name get_lines))
                      (args
                       (BinOp (List (Name prog)) Add (Name pos_parts))
                       (Name indent)
                       (Name prefix))
                      (keywords)
                      (starargs #f)
                      (kwargs #f)))))
                  (orelse
                   (Assign
                    (targets (Name lines))
                    (value (List (Name prog)))))))))
              (orelse
               (Assign
                (targets (Name indent))
                (value
                 (BinOp
                  (Str " ")
                  Mult
                  (Call
                   (func (Name len))
                   (args (Name prefix))
                   (keywords)
                   (starargs #f)
                   (kwargs #f)))))
               (Assign
                (targets (Name parts))
                (value (BinOp (Name opt_parts) Add (Name pos_parts))))
               (Assign
                (targets (Name lines))
                (value
                 (Call
                  (func (Name get_lines))
                  (args (Name parts) (Name indent))
                  (keywords)
                  (starargs #f)
                  (kwargs #f))))
               (If
                (test
                 (Compare
                  (left
                   (Call
                    (func (Name len))
                    (args (Name lines))
                    (keywords)
                    (starargs #f)
                    (kwargs #f)))
                  (ops Gt)
                  (comparators (Num 1))))
                (body
                 (Assign (targets (Name lines)) (value (List)))
                 (Expr
                  (Call
                   (func (Attribute (Name lines) extend))
                   (args
                    (Call
                     (func (Name get_lines))
                     (args (Name opt_parts) (Name indent))
                     (keywords)
                     (starargs #f)
                     (kwargs #f)))
                   (keywords)
                   (starargs #f)
                   (kwargs #f)))
                 (Expr
                  (Call
                   (func (Attribute (Name lines) extend))
                   (args
                    (Call
                     (func (Name get_lines))
                     (args (Name pos_parts) (Name indent))
                     (keywords)
                     (starargs #f)
                     (kwargs #f)))
                   (keywords)
                   (starargs #f)
                   (kwargs #f))))
                (orelse))
               (Assign
                (targets (Name lines))
                (value (BinOp (List (Name prog)) Add (Name lines))))))
             (Assign
              (targets (Name usage))
              (value
               (Call
                (func (Attribute (Str "\n") join))
                (args (Name lines))
                (keywords)
                (starargs #f)
                (kwargs #f)))))
            (orelse)))
          (orelse))))))
     (Return (BinOp (Str "%s%s\n\n") Mod (Tuple (Name prefix) (Name usage)))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _format_actions_usage)
    (args
     (Arguments
      (args self actions groups)
      (arg-types #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f #f)))
    (body
     (Assign
      (targets (Name group_actions))
      (value
       (Call (func (Name set)) (args) (keywords) (starargs #f) (kwargs #f))))
     (Assign (targets (Name inserts)) (value (Dict (keys) (values))))
     (For
      (target (Name group))
      (iter (Name groups))
      (body
       (Try
        (body
         (Assign
          (targets (Name start))
          (value
           (Call
            (func (Attribute (Name actions) index))
            (args
             (Subscript
              (Attribute (Name group) _group_actions)
              (Index (Num 0))))
            (keywords)
            (starargs #f)
            (kwargs #f)))))
        (handlers (except (Name ValueError) #f (Continue)))
        (orelse
         (Assign
          (targets (Name end))
          (value
           (BinOp
            (Name start)
            Add
            (Call
             (func (Name len))
             (args (Attribute (Name group) _group_actions))
             (keywords)
             (starargs #f)
             (kwargs #f)))))
         (If
          (test
           (Compare
            (left
             (Subscript (Name actions) (Slice (Name start) (Name end) #f)))
            (ops Eq)
            (comparators (Attribute (Name group) _group_actions))))
          (body
           (For
            (target (Name action))
            (iter (Attribute (Name group) _group_actions))
            (body
             (Expr
              (Call
               (func (Attribute (Name group_actions) add))
               (args (Name action))
               (keywords)
               (starargs #f)
               (kwargs #f))))
            (orelse))
           (If
            (test (UnaryOp Not (Attribute (Name group) required)))
            (body
             (If
              (test
               (Compare
                (left (Name start))
                (ops In)
                (comparators (Name inserts))))
              (body
               (AugAssign
                (Subscript (Name inserts) (Index (Name start)))
                Add
                (Str " [")))
              (orelse
               (Assign
                (targets (Subscript (Name inserts) (Index (Name start))))
                (value (Str "[")))))
             (Assign
              (targets (Subscript (Name inserts) (Index (Name end))))
              (value (Str "]"))))
            (orelse
             (If
              (test
               (Compare
                (left (Name start))
                (ops In)
                (comparators (Name inserts))))
              (body
               (AugAssign
                (Subscript (Name inserts) (Index (Name start)))
                Add
                (Str " (")))
              (orelse
               (Assign
                (targets (Subscript (Name inserts) (Index (Name start))))
                (value (Str "(")))))
             (Assign
              (targets (Subscript (Name inserts) (Index (Name end))))
              (value (Str ")")))))
           (For
            (target (Name i))
            (iter
             (Call
              (func (Name range))
              (args (BinOp (Name start) Add (Num 1)) (Name end))
              (keywords)
              (starargs #f)
              (kwargs #f)))
            (body
             (Assign
              (targets (Subscript (Name inserts) (Index (Name i))))
              (value (Str "|"))))
            (orelse)))
          (orelse)))
        (finalbody)))
      (orelse))
     (Assign (targets (Name parts)) (value (List)))
     (For
      (target (Tuple (Name i) (Name action)))
      (iter
       (Call
        (func (Name enumerate))
        (args (Name actions))
        (keywords)
        (starargs #f)
        (kwargs #f)))
      (body
       (If
        (test
         (Compare
          (left (Attribute (Name action) help))
          (ops Is)
          (comparators (Name SUPPRESS))))
        (body
         (Expr
          (Call
           (func (Attribute (Name parts) append))
           (args (NameConstant None))
           (keywords)
           (starargs #f)
           (kwargs #f)))
         (If
          (test
           (Compare
            (left
             (Call
              (func (Attribute (Name inserts) get))
              (args (Name i))
              (keywords)
              (starargs #f)
              (kwargs #f)))
            (ops Eq)
            (comparators (Str "|"))))
          (body
           (Expr
            (Call
             (func (Attribute (Name inserts) pop))
             (args (Name i))
             (keywords)
             (starargs #f)
             (kwargs #f))))
          (orelse
           (If
            (test
             (Compare
              (left
               (Call
                (func (Attribute (Name inserts) get))
                (args (BinOp (Name i) Add (Num 1)))
                (keywords)
                (starargs #f)
                (kwargs #f)))
              (ops Eq)
              (comparators (Str "|"))))
            (body
             (Expr
              (Call
               (func (Attribute (Name inserts) pop))
               (args (BinOp (Name i) Add (Num 1)))
               (keywords)
               (starargs #f)
               (kwargs #f))))
            (orelse)))))
        (orelse
         (If
          (test (UnaryOp Not (Attribute (Name action) option_strings)))
          (body
           (Assign
            (targets (Name default))
            (value
             (Call
              (func
               (Attribute (Name self) _get_default_metavar_for_positional))
              (args (Name action))
              (keywords)
              (starargs #f)
              (kwargs #f))))
           (Assign
            (targets (Name part))
            (value
             (Call
              (func (Attribute (Name self) _format_args))
              (args (Name action) (Name default))
              (keywords)
              (starargs #f)
              (kwargs #f))))
           (If
            (test
             (Compare
              (left (Name action))
              (ops In)
              (comparators (Name group_actions))))
            (body
             (If
              (test
               (BoolOp
                And
                (Compare
                 (left (Subscript (Name part) (Index (Num 0))))
                 (ops Eq)
                 (comparators (Str "[")))
                (Compare
                 (left (Subscript (Name part) (Index (UnaryOp USub (Num 1)))))
                 (ops Eq)
                 (comparators (Str "]")))))
              (body
               (Assign
                (targets (Name part))
                (value
                 (Subscript
                  (Name part)
                  (Slice (Num 1) (UnaryOp USub (Num 1)) #f)))))
              (orelse)))
            (orelse))
           (Expr
            (Call
             (func (Attribute (Name parts) append))
             (args (Name part))
             (keywords)
             (starargs #f)
             (kwargs #f))))
          (orelse
           (Assign
            (targets (Name option_string))
            (value
             (Subscript
              (Attribute (Name action) option_strings)
              (Index (Num 0)))))
           (If
            (test
             (Compare
              (left (Attribute (Name action) nargs))
              (ops Eq)
              (comparators (Num 0))))
            (body
             (Assign
              (targets (Name part))
              (value (BinOp (Str "%s") Mod (Name option_string)))))
            (orelse
             (Assign
              (targets (Name default))
              (value
               (Call
                (func
                 (Attribute (Name self) _get_default_metavar_for_optional))
                (args (Name action))
                (keywords)
                (starargs #f)
                (kwargs #f))))
             (Assign
              (targets (Name args_string))
              (value
               (Call
                (func (Attribute (Name self) _format_args))
                (args (Name action) (Name default))
                (keywords)
                (starargs #f)
                (kwargs #f))))
             (Assign
              (targets (Name part))
              (value
               (BinOp
                (Str "%s %s")
                Mod
                (Tuple (Name option_string) (Name args_string)))))))
           (If
            (test
             (BoolOp
              And
              (UnaryOp Not (Attribute (Name action) required))
              (Compare
               (left (Name action))
               (ops NotIn)
               (comparators (Name group_actions)))))
            (body
             (Assign
              (targets (Name part))
              (value (BinOp (Str "[%s]") Mod (Name part)))))
            (orelse))
           (Expr
            (Call
             (func (Attribute (Name parts) append))
             (args (Name part))
             (keywords)
             (starargs #f)
             (kwargs #f))))))))
      (orelse))
     (For
      (target (Name i))
      (iter
       (Call
        (func (Name sorted))
        (args (Name inserts))
        (keywords (reverse (NameConstant True)))
        (starargs #f)
        (kwargs #f)))
      (body
       (Assign
        (targets (Subscript (Name parts) (Slice (Name i) (Name i) #f)))
        (value (List (Subscript (Name inserts) (Index (Name i)))))))
      (orelse))
     (Assign
      (targets (Name text))
      (value
       (Call
        (func (Attribute (Str " ") join))
        (args
         (ListComp
          (Name item)
          (for
           (Name item)
           in
           (Name parts)
           if
           (Compare
            (left (Name item))
            (ops IsNot)
            (comparators (NameConstant None))))))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (Assign (targets (Name open)) (value (Str "[\\[(]")))
     (Assign (targets (Name close)) (value (Str "[\\])]")))
     (Assign
      (targets (Name text))
      (value
       (Call
        (func (Attribute (Name _re) sub))
        (args (BinOp (Str "(%s) ") Mod (Name open)) (Str "\\1") (Name text))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (Assign
      (targets (Name text))
      (value
       (Call
        (func (Attribute (Name _re) sub))
        (args (BinOp (Str " (%s)") Mod (Name close)) (Str "\\1") (Name text))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (Assign
      (targets (Name text))
      (value
       (Call
        (func (Attribute (Name _re) sub))
        (args
         (BinOp (Str "%s *%s") Mod (Tuple (Name open) (Name close)))
         (Str "")
         (Name text))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (Assign
      (targets (Name text))
      (value
       (Call
        (func (Attribute (Name _re) sub))
        (args (Str "\\(([^|]*)\\)") (Str "\\1") (Name text))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (Assign
      (targets (Name text))
      (value
       (Call
        (func (Attribute (Name text) strip))
        (args)
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (Return (Name text)))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _format_text)
    (args
     (Arguments
      (args self text)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f)))
    (body
     (If
      (test
       (Compare (left (Str "%(prog)")) (ops In) (comparators (Name text))))
      (body
       (Assign
        (targets (Name text))
        (value
         (BinOp
          (Name text)
          Mod
          (Call
           (func (Name dict))
           (args)
           (keywords (prog (Attribute (Name self) _prog)))
           (starargs #f)
           (kwargs #f))))))
      (orelse))
     (Assign
      (targets (Name text_width))
      (value
       (Call
        (func (Name max))
        (args
         (BinOp
          (Attribute (Name self) _width)
          Sub
          (Attribute (Name self) _current_indent))
         (Num 11))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (Assign
      (targets (Name indent))
      (value (BinOp (Str " ") Mult (Attribute (Name self) _current_indent))))
     (Return
      (BinOp
       (Call
        (func (Attribute (Name self) _fill_text))
        (args (Name text) (Name text_width) (Name indent))
        (keywords)
        (starargs #f)
        (kwargs #f))
       Add
       (Str "\n\n"))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _format_action)
    (args
     (Arguments
      (args self action)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f)))
    (body
     (Assign
      (targets (Name help_position))
      (value
       (Call
        (func (Name min))
        (args
         (BinOp (Attribute (Name self) _action_max_length) Add (Num 2))
         (Attribute (Name self) _max_help_position))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (Assign
      (targets (Name help_width))
      (value
       (Call
        (func (Name max))
        (args
         (BinOp (Attribute (Name self) _width) Sub (Name help_position))
         (Num 11))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (Assign
      (targets (Name action_width))
      (value
       (BinOp
        (BinOp
         (Name help_position)
         Sub
         (Attribute (Name self) _current_indent))
        Sub
        (Num 2))))
     (Assign
      (targets (Name action_header))
      (value
       (Call
        (func (Attribute (Name self) _format_action_invocation))
        (args (Name action))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (If
      (test (UnaryOp Not (Attribute (Name action) help)))
      (body
       (Assign
        (targets (Name tup))
        (value
         (Tuple
          (Attribute (Name self) _current_indent)
          (Str "")
          (Name action_header))))
       (Assign
        (targets (Name action_header))
        (value (BinOp (Str "%*s%s\n") Mod (Name tup)))))
      (orelse
       (If
        (test
         (Compare
          (left
           (Call
            (func (Name len))
            (args (Name action_header))
            (keywords)
            (starargs #f)
            (kwargs #f)))
          (ops LtE)
          (comparators (Name action_width))))
        (body
         (Assign
          (targets (Name tup))
          (value
           (Tuple
            (Attribute (Name self) _current_indent)
            (Str "")
            (Name action_width)
            (Name action_header))))
         (Assign
          (targets (Name action_header))
          (value (BinOp (Str "%*s%-*s  ") Mod (Name tup))))
         (Assign (targets (Name indent_first)) (value (Num 0))))
        (orelse
         (Assign
          (targets (Name tup))
          (value
           (Tuple
            (Attribute (Name self) _current_indent)
            (Str "")
            (Name action_header))))
         (Assign
          (targets (Name action_header))
          (value (BinOp (Str "%*s%s\n") Mod (Name tup))))
         (Assign
          (targets (Name indent_first))
          (value (Name help_position)))))))
     (Assign (targets (Name parts)) (value (List (Name action_header))))
     (If
      (test (Attribute (Name action) help))
      (body
       (Assign
        (targets (Name help_text))
        (value
         (Call
          (func (Attribute (Name self) _expand_help))
          (args (Name action))
          (keywords)
          (starargs #f)
          (kwargs #f))))
       (Assign
        (targets (Name help_lines))
        (value
         (Call
          (func (Attribute (Name self) _split_lines))
          (args (Name help_text) (Name help_width))
          (keywords)
          (starargs #f)
          (kwargs #f))))
       (Expr
        (Call
         (func (Attribute (Name parts) append))
         (args
          (BinOp
           (Str "%*s%s\n")
           Mod
           (Tuple
            (Name indent_first)
            (Str "")
            (Subscript (Name help_lines) (Index (Num 0))))))
         (keywords)
         (starargs #f)
         (kwargs #f)))
       (For
        (target (Name line))
        (iter (Subscript (Name help_lines) (Slice (Num 1) #f #f)))
        (body
         (Expr
          (Call
           (func (Attribute (Name parts) append))
           (args
            (BinOp
             (Str "%*s%s\n")
             Mod
             (Tuple (Name help_position) (Str "") (Name line))))
           (keywords)
           (starargs #f)
           (kwargs #f))))
        (orelse)))
      (orelse
       (If
        (test
         (UnaryOp
          Not
          (Call
           (func (Attribute (Name action_header) endswith))
           (args (Str "\n"))
           (keywords)
           (starargs #f)
           (kwargs #f))))
        (body
         (Expr
          (Call
           (func (Attribute (Name parts) append))
           (args (Str "\n"))
           (keywords)
           (starargs #f)
           (kwargs #f))))
        (orelse))))
     (For
      (target (Name subaction))
      (iter
       (Call
        (func (Attribute (Name self) _iter_indented_subactions))
        (args (Name action))
        (keywords)
        (starargs #f)
        (kwargs #f)))
      (body
       (Expr
        (Call
         (func (Attribute (Name parts) append))
         (args
          (Call
           (func (Attribute (Name self) _format_action))
           (args (Name subaction))
           (keywords)
           (starargs #f)
           (kwargs #f)))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (orelse))
     (Return
      (Call
       (func (Attribute (Name self) _join_parts))
       (args (Name parts))
       (keywords)
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _format_action_invocation)
    (args
     (Arguments
      (args self action)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f)))
    (body
     (If
      (test (UnaryOp Not (Attribute (Name action) option_strings)))
      (body
       (Assign
        (targets (Name default))
        (value
         (Call
          (func (Attribute (Name self) _get_default_metavar_for_positional))
          (args (Name action))
          (keywords)
          (starargs #f)
          (kwargs #f))))
       (Assign
        (targets (Tuple (Name metavar)))
        (value
         (Call
          (func
           (Call
            (func (Attribute (Name self) _metavar_formatter))
            (args (Name action) (Name default))
            (keywords)
            (starargs #f)
            (kwargs #f)))
          (args (Num 1))
          (keywords)
          (starargs #f)
          (kwargs #f))))
       (Return (Name metavar)))
      (orelse
       (Assign (targets (Name parts)) (value (List)))
       (If
        (test
         (Compare
          (left (Attribute (Name action) nargs))
          (ops Eq)
          (comparators (Num 0))))
        (body
         (Expr
          (Call
           (func (Attribute (Name parts) extend))
           (args (Attribute (Name action) option_strings))
           (keywords)
           (starargs #f)
           (kwargs #f))))
        (orelse
         (Assign
          (targets (Name default))
          (value
           (Call
            (func (Attribute (Name self) _get_default_metavar_for_optional))
            (args (Name action))
            (keywords)
            (starargs #f)
            (kwargs #f))))
         (Assign
          (targets (Name args_string))
          (value
           (Call
            (func (Attribute (Name self) _format_args))
            (args (Name action) (Name default))
            (keywords)
            (starargs #f)
            (kwargs #f))))
         (For
          (target (Name option_string))
          (iter (Attribute (Name action) option_strings))
          (body
           (Expr
            (Call
             (func (Attribute (Name parts) append))
             (args
              (BinOp
               (Str "%s %s")
               Mod
               (Tuple (Name option_string) (Name args_string))))
             (keywords)
             (starargs #f)
             (kwargs #f))))
          (orelse))))
       (Return
        (Call
         (func (Attribute (Str ", ") join))
         (args (Name parts))
         (keywords)
         (starargs #f)
         (kwargs #f))))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _metavar_formatter)
    (args
     (Arguments
      (args self action default_metavar)
      (arg-types #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f #f)))
    (body
     (If
      (test
       (Compare
        (left (Attribute (Name action) metavar))
        (ops IsNot)
        (comparators (NameConstant None))))
      (body
       (Assign
        (targets (Name result))
        (value (Attribute (Name action) metavar))))
      (orelse
       (If
        (test
         (Compare
          (left (Attribute (Name action) choices))
          (ops IsNot)
          (comparators (NameConstant None))))
        (body
         (Assign
          (targets (Name choice_strs))
          (value
           (ListComp
            (Call
             (func (Name str))
             (args (Name choice))
             (keywords)
             (starargs #f)
             (kwargs #f))
            (for (Name choice) in (Attribute (Name action) choices) if))))
         (Assign
          (targets (Name result))
          (value
           (BinOp
            (Str "{%s}")
            Mod
            (Call
             (func (Attribute (Str ",") join))
             (args (Name choice_strs))
             (keywords)
             (starargs #f)
             (kwargs #f))))))
        (orelse
         (Assign (targets (Name result)) (value (Name default_metavar)))))))
     (FunctionDef
      (name format)
      (args
       (Arguments
        (args tuple_size)
        (arg-types #f)
        (vararg #f)
        (kwonlyargs)
        (kwonlyarg-types)
        (kw_defaults)
        (kwarg #f)
        (defaults #f)))
      (body
       (If
        (test
         (Call
          (func (Name isinstance))
          (args (Name result) (Name tuple))
          (keywords)
          (starargs #f)
          (kwargs #f)))
        (body (Return (Name result)))
        (orelse
         (Return (BinOp (Tuple (Name result)) Mult (Name tuple_size))))))
      (decorator_list)
      (returns #f))
     (Return (Name format)))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _format_args)
    (args
     (Arguments
      (args self action default_metavar)
      (arg-types #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f #f)))
    (body
     (Assign
      (targets (Name get_metavar))
      (value
       (Call
        (func (Attribute (Name self) _metavar_formatter))
        (args (Name action) (Name default_metavar))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (If
      (test
       (Compare
        (left (Attribute (Name action) nargs))
        (ops Is)
        (comparators (NameConstant None))))
      (body
       (Assign
        (targets (Name result))
        (value
         (BinOp
          (Str "%s")
          Mod
          (Call
           (func (Name get_metavar))
           (args (Num 1))
           (keywords)
           (starargs #f)
           (kwargs #f))))))
      (orelse
       (If
        (test
         (Compare
          (left (Attribute (Name action) nargs))
          (ops Eq)
          (comparators (Name OPTIONAL))))
        (body
         (Assign
          (targets (Name result))
          (value
           (BinOp
            (Str "[%s]")
            Mod
            (Call
             (func (Name get_metavar))
             (args (Num 1))
             (keywords)
             (starargs #f)
             (kwargs #f))))))
        (orelse
         (If
          (test
           (Compare
            (left (Attribute (Name action) nargs))
            (ops Eq)
            (comparators (Name ZERO_OR_MORE))))
          (body
           (Assign
            (targets (Name result))
            (value
             (BinOp
              (Str "[%s [%s ...]]")
              Mod
              (Call
               (func (Name get_metavar))
               (args (Num 2))
               (keywords)
               (starargs #f)
               (kwargs #f))))))
          (orelse
           (If
            (test
             (Compare
              (left (Attribute (Name action) nargs))
              (ops Eq)
              (comparators (Name ONE_OR_MORE))))
            (body
             (Assign
              (targets (Name result))
              (value
               (BinOp
                (Str "%s [%s ...]")
                Mod
                (Call
                 (func (Name get_metavar))
                 (args (Num 2))
                 (keywords)
                 (starargs #f)
                 (kwargs #f))))))
            (orelse
             (If
              (test
               (Compare
                (left (Attribute (Name action) nargs))
                (ops Eq)
                (comparators (Name REMAINDER))))
              (body (Assign (targets (Name result)) (value (Str "..."))))
              (orelse
               (If
                (test
                 (Compare
                  (left (Attribute (Name action) nargs))
                  (ops Eq)
                  (comparators (Name PARSER))))
                (body
                 (Assign
                  (targets (Name result))
                  (value
                   (BinOp
                    (Str "%s ...")
                    Mod
                    (Call
                     (func (Name get_metavar))
                     (args (Num 1))
                     (keywords)
                     (starargs #f)
                     (kwargs #f))))))
                (orelse
                 (Assign
                  (targets (Name formats))
                  (value
                   (ListComp
                    (Str "%s")
                    (for
                     (Name _)
                     in
                     (Call
                      (func (Name range))
                      (args (Attribute (Name action) nargs))
                      (keywords)
                      (starargs #f)
                      (kwargs #f))
                     if))))
                 (Assign
                  (targets (Name result))
                  (value
                   (BinOp
                    (Call
                     (func (Attribute (Str " ") join))
                     (args (Name formats))
                     (keywords)
                     (starargs #f)
                     (kwargs #f))
                    Mod
                    (Call
                     (func (Name get_metavar))
                     (args (Attribute (Name action) nargs))
                     (keywords)
                     (starargs #f)
                     (kwargs #f)))))))))))))))))
     (Return (Name result)))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _expand_help)
    (args
     (Arguments
      (args self action)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f)))
    (body
     (Assign
      (targets (Name params))
      (value
       (Call
        (func (Name dict))
        (args
         (Call
          (func (Name vars))
          (args (Name action))
          (keywords)
          (starargs #f)
          (kwargs #f)))
        (keywords (prog (Attribute (Name self) _prog)))
        (starargs #f)
        (kwargs #f))))
     (For
      (target (Name name))
      (iter
       (Call
        (func (Name list))
        (args (Name params))
        (keywords)
        (starargs #f)
        (kwargs #f)))
      (body
       (If
        (test
         (Compare
          (left (Subscript (Name params) (Index (Name name))))
          (ops Is)
          (comparators (Name SUPPRESS))))
        (body (Delete (Subscript (Name params) (Index (Name name)))))
        (orelse)))
      (orelse))
     (For
      (target (Name name))
      (iter
       (Call
        (func (Name list))
        (args (Name params))
        (keywords)
        (starargs #f)
        (kwargs #f)))
      (body
       (If
        (test
         (Call
          (func (Name hasattr))
          (args (Subscript (Name params) (Index (Name name))) (Str "__name__"))
          (keywords)
          (starargs #f)
          (kwargs #f)))
        (body
         (Assign
          (targets (Subscript (Name params) (Index (Name name))))
          (value
           (Attribute
            (Subscript (Name params) (Index (Name name)))
            __name__))))
        (orelse)))
      (orelse))
     (If
      (test
       (Compare
        (left
         (Call
          (func (Attribute (Name params) get))
          (args (Str "choices"))
          (keywords)
          (starargs #f)
          (kwargs #f)))
        (ops IsNot)
        (comparators (NameConstant None))))
      (body
       (Assign
        (targets (Name choices_str))
        (value
         (Call
          (func (Attribute (Str ", ") join))
          (args
           (ListComp
            (Call
             (func (Name str))
             (args (Name c))
             (keywords)
             (starargs #f)
             (kwargs #f))
            (for
             (Name c)
             in
             (Subscript (Name params) (Index (Str "choices")))
             if)))
          (keywords)
          (starargs #f)
          (kwargs #f))))
       (Assign
        (targets (Subscript (Name params) (Index (Str "choices"))))
        (value (Name choices_str))))
      (orelse))
     (Return
      (BinOp
       (Call
        (func (Attribute (Name self) _get_help_string))
        (args (Name action))
        (keywords)
        (starargs #f)
        (kwargs #f))
       Mod
       (Name params))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _iter_indented_subactions)
    (args
     (Arguments
      (args self action)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f)))
    (body
     (Try
      (body
       (Assign
        (targets (Name get_subactions))
        (value (Attribute (Name action) _get_subactions))))
      (handlers (except (Name AttributeError) #f (Pass)))
      (orelse
       (Expr
        (Call
         (func (Attribute (Name self) _indent))
         (args)
         (keywords)
         (starargs #f)
         (kwargs #f)))
       (Expr
        (YieldFrom
         (Call
          (func (Name get_subactions))
          (args)
          (keywords)
          (starargs #f)
          (kwargs #f))))
       (Expr
        (Call
         (func (Attribute (Name self) _dedent))
         (args)
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (finalbody)))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _split_lines)
    (args
     (Arguments
      (args self text width)
      (arg-types #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f #f)))
    (body
     (Assign
      (targets (Name text))
      (value
       (Call
        (func
         (Attribute
          (Call
           (func (Attribute (Attribute (Name self) _whitespace_matcher) sub))
           (args (Str " ") (Name text))
           (keywords)
           (starargs #f)
           (kwargs #f))
          strip))
        (args)
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (Return
      (Call
       (func (Attribute (Name _textwrap) wrap))
       (args (Name text) (Name width))
       (keywords)
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _fill_text)
    (args
     (Arguments
      (args self text width indent)
      (arg-types #f #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f #f #f)))
    (body
     (Assign
      (targets (Name text))
      (value
       (Call
        (func
         (Attribute
          (Call
           (func (Attribute (Attribute (Name self) _whitespace_matcher) sub))
           (args (Str " ") (Name text))
           (keywords)
           (starargs #f)
           (kwargs #f))
          strip))
        (args)
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (Return
      (Call
       (func (Attribute (Name _textwrap) fill))
       (args (Name text) (Name width))
       (keywords
        (initial_indent (Name indent))
        (subsequent_indent (Name indent)))
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _get_help_string)
    (args
     (Arguments
      (args self action)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f)))
    (body (Return (Attribute (Name action) help)))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _get_default_metavar_for_optional)
    (args
     (Arguments
      (args self action)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f)))
    (body
     (Return
      (Call
       (func (Attribute (Attribute (Name action) dest) upper))
       (args)
       (keywords)
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _get_default_metavar_for_positional)
    (args
     (Arguments
      (args self action)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f)))
    (body (Return (Attribute (Name action) dest)))
    (decorator_list)
    (returns #f)))
  (decorator_list))
 (ClassDef
  (name RawDescriptionHelpFormatter)
  (bases (Name HelpFormatter))
  (keywords)
  (starargs #f)
  (kwargs #f)
  (body
   (Expr
    (Str
     "Help message formatter which retains any formatting in descriptions.\n\n    Only the name of this class is considered a public API. All the methods\n    provided by the class are considered an implementation detail.\n    "))
   (FunctionDef
    (name _fill_text)
    (args
     (Arguments
      (args self text width indent)
      (arg-types #f #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f #f #f)))
    (body
     (Return
      (Call
       (func (Attribute (Str "") join))
       (args
        (GeneratorExp
         (BinOp (Name indent) Add (Name line))
         (for
          (Name line)
          in
          (Call
           (func (Attribute (Name text) splitlines))
           (args)
           (keywords (keepends (NameConstant True)))
           (starargs #f)
           (kwargs #f))
          if)))
       (keywords)
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f)))
  (decorator_list))
 (ClassDef
  (name RawTextHelpFormatter)
  (bases (Name RawDescriptionHelpFormatter))
  (keywords)
  (starargs #f)
  (kwargs #f)
  (body
   (Expr
    (Str
     "Help message formatter which retains formatting of all help text.\n\n    Only the name of this class is considered a public API. All the methods\n    provided by the class are considered an implementation detail.\n    "))
   (FunctionDef
    (name _split_lines)
    (args
     (Arguments
      (args self text width)
      (arg-types #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f #f)))
    (body
     (Return
      (Call
       (func (Attribute (Name text) splitlines))
       (args)
       (keywords)
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f)))
  (decorator_list))
 (ClassDef
  (name ArgumentDefaultsHelpFormatter)
  (bases (Name HelpFormatter))
  (keywords)
  (starargs #f)
  (kwargs #f)
  (body
   (Expr
    (Str
     "Help message formatter which adds default values to argument help.\n\n    Only the name of this class is considered a public API. All the methods\n    provided by the class are considered an implementation detail.\n    "))
   (FunctionDef
    (name _get_help_string)
    (args
     (Arguments
      (args self action)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f)))
    (body
     (Assign (targets (Name help)) (value (Attribute (Name action) help)))
     (If
      (test
       (Compare
        (left (Str "%(default)"))
        (ops NotIn)
        (comparators (Attribute (Name action) help))))
      (body
       (If
        (test
         (Compare
          (left (Attribute (Name action) default))
          (ops IsNot)
          (comparators (Name SUPPRESS))))
        (body
         (Assign
          (targets (Name defaulting_nargs))
          (value (List (Name OPTIONAL) (Name ZERO_OR_MORE))))
         (If
          (test
           (BoolOp
            Or
            (Attribute (Name action) option_strings)
            (Compare
             (left (Attribute (Name action) nargs))
             (ops In)
             (comparators (Name defaulting_nargs)))))
          (body (AugAssign (Name help) Add (Str " (default: %(default)s)")))
          (orelse)))
        (orelse)))
      (orelse))
     (Return (Name help)))
    (decorator_list)
    (returns #f)))
  (decorator_list))
 (ClassDef
  (name MetavarTypeHelpFormatter)
  (bases (Name HelpFormatter))
  (keywords)
  (starargs #f)
  (kwargs #f)
  (body
   (Expr
    (Str
     "Help message formatter which uses the argument 'type' as the default\n    metavar value (instead of the argument 'dest')\n\n    Only the name of this class is considered a public API. All the methods\n    provided by the class are considered an implementation detail.\n    "))
   (FunctionDef
    (name _get_default_metavar_for_optional)
    (args
     (Arguments
      (args self action)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f)))
    (body (Return (Attribute (Attribute (Name action) type) __name__)))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _get_default_metavar_for_positional)
    (args
     (Arguments
      (args self action)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f)))
    (body (Return (Attribute (Attribute (Name action) type) __name__)))
    (decorator_list)
    (returns #f)))
  (decorator_list))
 (FunctionDef
  (name _get_action_name)
  (args
   (Arguments
    (args argument)
    (arg-types #f)
    (vararg #f)
    (kwonlyargs)
    (kwonlyarg-types)
    (kw_defaults)
    (kwarg #f)
    (defaults #f)))
  (body
   (If
    (test
     (Compare
      (left (Name argument))
      (ops Is)
      (comparators (NameConstant None))))
    (body (Return (NameConstant None)))
    (orelse
     (If
      (test (Attribute (Name argument) option_strings))
      (body
       (Return
        (Call
         (func (Attribute (Str "/") join))
         (args (Attribute (Name argument) option_strings))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (orelse
       (If
        (test
         (Compare
          (left (Attribute (Name argument) metavar))
          (ops NotIn)
          (comparators (Tuple (NameConstant None) (Name SUPPRESS)))))
        (body (Return (Attribute (Name argument) metavar)))
        (orelse
         (If
          (test
           (Compare
            (left (Attribute (Name argument) dest))
            (ops NotIn)
            (comparators (Tuple (NameConstant None) (Name SUPPRESS)))))
          (body (Return (Attribute (Name argument) dest)))
          (orelse (Return (NameConstant None)))))))))))
  (decorator_list)
  (returns #f))
 (ClassDef
  (name ArgumentError)
  (bases (Name Exception))
  (keywords)
  (starargs #f)
  (kwargs #f)
  (body
   (Expr
    (Str
     "An error from creating or using an argument (optional or positional).\n\n    The string value of this exception is the message, augmented with\n    information about the argument that caused it.\n    "))
   (FunctionDef
    (name __init__)
    (args
     (Arguments
      (args self argument message)
      (arg-types #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f #f)))
    (body
     (Assign
      (targets (Attribute (Name self) argument_name))
      (value
       (Call
        (func (Name _get_action_name))
        (args (Name argument))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (Assign (targets (Attribute (Name self) message)) (value (Name message))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name __str__)
    (args
     (Arguments
      (args self)
      (arg-types #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f)))
    (body
     (If
      (test
       (Compare
        (left (Attribute (Name self) argument_name))
        (ops Is)
        (comparators (NameConstant None))))
      (body (Assign (targets (Name format)) (value (Str "%(message)s"))))
      (orelse
       (Assign
        (targets (Name format))
        (value (Str "argument %(argument_name)s: %(message)s")))))
     (Return
      (BinOp
       (Name format)
       Mod
       (Call
        (func (Name dict))
        (args)
        (keywords
         (message (Attribute (Name self) message))
         (argument_name (Attribute (Name self) argument_name)))
        (starargs #f)
        (kwargs #f)))))
    (decorator_list)
    (returns #f)))
  (decorator_list))
 (ClassDef
  (name ArgumentTypeError)
  (bases (Name Exception))
  (keywords)
  (starargs #f)
  (kwargs #f)
  (body
   (Expr
    (Str "An error from trying to convert a command line string to a type."))
   (Pass))
  (decorator_list))
 (ClassDef
  (name Action)
  (bases (Name _AttributeHolder))
  (keywords)
  (starargs #f)
  (kwargs #f)
  (body
   (Expr
    (Str
     "Information about how to convert command line strings to Python objects.\n\n    Action objects are used by an ArgumentParser to represent the information\n    needed to parse a single argument from one or more strings from the\n    command line. The keyword arguments to the Action constructor are also\n    all attributes of Action instances.\n\n    Keyword Arguments:\n\n        - option_strings -- A list of command-line option strings which\n            should be associated with this action.\n\n        - dest -- The name of the attribute to hold the created object(s)\n\n        - nargs -- The number of command-line arguments that should be\n            consumed. By default, one argument will be consumed and a single\n            value will be produced.  Other values include:\n                - N (an integer) consumes N arguments (and produces a list)\n                - '?' consumes zero or one arguments\n                - '*' consumes zero or more arguments (and produces a list)\n                - '+' consumes one or more arguments (and produces a list)\n            Note that the difference between the default and nargs=1 is that\n            with the default, a single value will be produced, while with\n            nargs=1, a list containing a single value will be produced.\n\n        - const -- The value to be produced if the option is specified and the\n            option uses an action that takes no values.\n\n        - default -- The value to be produced if the option is not specified.\n\n        - type -- A callable that accepts a single string argument, and\n            returns the converted value.  The standard Python types str, int,\n            float, and complex are useful examples of such callables.  If None,\n            str is used.\n\n        - choices -- A container of values that should be allowed. If not None,\n            after a command-line argument has been converted to the appropriate\n            type, an exception will be raised if it is not a member of this\n            collection.\n\n        - required -- True if the action must always be specified at the\n            command line. This is only meaningful for optional command-line\n            arguments.\n\n        - help -- The help string describing the argument.\n\n        - metavar -- The name to be used for the option's argument with the\n            help string. If None, the 'dest' value will be used as the name.\n    "))
   (FunctionDef
    (name __init__)
    (args
     (Arguments
      (args
       self
       option_strings
       dest
       nargs
       const
       default
       type
       choices
       required
       help
       metavar)
      (arg-types #f #f #f #f #f #f #f #f #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults
       #f
       #f
       #f
       (NameConstant None)
       (NameConstant None)
       (NameConstant None)
       (NameConstant None)
       (NameConstant None)
       (NameConstant False)
       (NameConstant None)
       (NameConstant None))))
    (body
     (Assign
      (targets (Attribute (Name self) option_strings))
      (value (Name option_strings)))
     (Assign (targets (Attribute (Name self) dest)) (value (Name dest)))
     (Assign (targets (Attribute (Name self) nargs)) (value (Name nargs)))
     (Assign (targets (Attribute (Name self) const)) (value (Name const)))
     (Assign (targets (Attribute (Name self) default)) (value (Name default)))
     (Assign (targets (Attribute (Name self) type)) (value (Name type)))
     (Assign (targets (Attribute (Name self) choices)) (value (Name choices)))
     (Assign
      (targets (Attribute (Name self) required))
      (value (Name required)))
     (Assign (targets (Attribute (Name self) help)) (value (Name help)))
     (Assign (targets (Attribute (Name self) metavar)) (value (Name metavar))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _get_kwargs)
    (args
     (Arguments
      (args self)
      (arg-types #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f)))
    (body
     (Assign
      (targets (Name names))
      (value
       (List
        (Str "option_strings")
        (Str "dest")
        (Str "nargs")
        (Str "const")
        (Str "default")
        (Str "type")
        (Str "choices")
        (Str "help")
        (Str "metavar"))))
     (Return
      (ListComp
       (Tuple
        (Name name)
        (Call
         (func (Name getattr))
         (args (Name self) (Name name))
         (keywords)
         (starargs #f)
         (kwargs #f)))
       (for (Name name) in (Name names) if))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name __call__)
    (args
     (Arguments
      (args self parser namespace values option_string)
      (arg-types #f #f #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f #f #f (NameConstant None))))
    (body
     (Raise
      (Call
       (func (Name NotImplementedError))
       (args
        (Call
         (func (Name _))
         (args (Str ".__call__() not defined"))
         (keywords)
         (starargs #f)
         (kwargs #f)))
       (keywords)
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f)))
  (decorator_list))
 (ClassDef
  (name _StoreAction)
  (bases (Name Action))
  (keywords)
  (starargs #f)
  (kwargs #f)
  (body
   (FunctionDef
    (name __init__)
    (args
     (Arguments
      (args
       self
       option_strings
       dest
       nargs
       const
       default
       type
       choices
       required
       help
       metavar)
      (arg-types #f #f #f #f #f #f #f #f #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults
       #f
       #f
       #f
       (NameConstant None)
       (NameConstant None)
       (NameConstant None)
       (NameConstant None)
       (NameConstant None)
       (NameConstant False)
       (NameConstant None)
       (NameConstant None))))
    (body
     (If
      (test (Compare (left (Name nargs)) (ops Eq) (comparators (Num 0))))
      (body
       (Raise
        (Call
         (func (Name ValueError))
         (args
          (Str
           "nargs for store actions must be > 0; if you have nothing to store, actions such as store true or store const may be more appropriate"))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (orelse))
     (If
      (test
       (BoolOp
        And
        (Compare
         (left (Name const))
         (ops IsNot)
         (comparators (NameConstant None)))
        (Compare
         (left (Name nargs))
         (ops NotEq)
         (comparators (Name OPTIONAL)))))
      (body
       (Raise
        (Call
         (func (Name ValueError))
         (args
          (BinOp (Str "nargs must be %r to supply const") Mod (Name OPTIONAL)))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (orelse))
     (Expr
      (Call
       (func
        (Attribute
         (Call
          (func (Name super))
          (args (Name _StoreAction) (Name self))
          (keywords)
          (starargs #f)
          (kwargs #f))
         __init__))
       (args)
       (keywords
        (option_strings (Name option_strings))
        (dest (Name dest))
        (nargs (Name nargs))
        (const (Name const))
        (default (Name default))
        (type (Name type))
        (choices (Name choices))
        (required (Name required))
        (help (Name help))
        (metavar (Name metavar)))
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name __call__)
    (args
     (Arguments
      (args self parser namespace values option_string)
      (arg-types #f #f #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f #f #f (NameConstant None))))
    (body
     (Expr
      (Call
       (func (Name setattr))
       (args (Name namespace) (Attribute (Name self) dest) (Name values))
       (keywords)
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f)))
  (decorator_list))
 (ClassDef
  (name _StoreConstAction)
  (bases (Name Action))
  (keywords)
  (starargs #f)
  (kwargs #f)
  (body
   (FunctionDef
    (name __init__)
    (args
     (Arguments
      (args self option_strings dest const default required help metavar)
      (arg-types #f #f #f #f #f #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults
       #f
       #f
       #f
       #f
       (NameConstant None)
       (NameConstant False)
       (NameConstant None)
       (NameConstant None))))
    (body
     (Expr
      (Call
       (func
        (Attribute
         (Call
          (func (Name super))
          (args (Name _StoreConstAction) (Name self))
          (keywords)
          (starargs #f)
          (kwargs #f))
         __init__))
       (args)
       (keywords
        (option_strings (Name option_strings))
        (dest (Name dest))
        (nargs (Num 0))
        (const (Name const))
        (default (Name default))
        (required (Name required))
        (help (Name help)))
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name __call__)
    (args
     (Arguments
      (args self parser namespace values option_string)
      (arg-types #f #f #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f #f #f (NameConstant None))))
    (body
     (Expr
      (Call
       (func (Name setattr))
       (args
        (Name namespace)
        (Attribute (Name self) dest)
        (Attribute (Name self) const))
       (keywords)
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f)))
  (decorator_list))
 (ClassDef
  (name _StoreTrueAction)
  (bases (Name _StoreConstAction))
  (keywords)
  (starargs #f)
  (kwargs #f)
  (body
   (FunctionDef
    (name __init__)
    (args
     (Arguments
      (args self option_strings dest default required help)
      (arg-types #f #f #f #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults
       #f
       #f
       #f
       (NameConstant False)
       (NameConstant False)
       (NameConstant None))))
    (body
     (Expr
      (Call
       (func
        (Attribute
         (Call
          (func (Name super))
          (args (Name _StoreTrueAction) (Name self))
          (keywords)
          (starargs #f)
          (kwargs #f))
         __init__))
       (args)
       (keywords
        (option_strings (Name option_strings))
        (dest (Name dest))
        (const (NameConstant True))
        (default (Name default))
        (required (Name required))
        (help (Name help)))
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f)))
  (decorator_list))
 (ClassDef
  (name _StoreFalseAction)
  (bases (Name _StoreConstAction))
  (keywords)
  (starargs #f)
  (kwargs #f)
  (body
   (FunctionDef
    (name __init__)
    (args
     (Arguments
      (args self option_strings dest default required help)
      (arg-types #f #f #f #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults
       #f
       #f
       #f
       (NameConstant True)
       (NameConstant False)
       (NameConstant None))))
    (body
     (Expr
      (Call
       (func
        (Attribute
         (Call
          (func (Name super))
          (args (Name _StoreFalseAction) (Name self))
          (keywords)
          (starargs #f)
          (kwargs #f))
         __init__))
       (args)
       (keywords
        (option_strings (Name option_strings))
        (dest (Name dest))
        (const (NameConstant False))
        (default (Name default))
        (required (Name required))
        (help (Name help)))
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f)))
  (decorator_list))
 (ClassDef
  (name _AppendAction)
  (bases (Name Action))
  (keywords)
  (starargs #f)
  (kwargs #f)
  (body
   (FunctionDef
    (name __init__)
    (args
     (Arguments
      (args
       self
       option_strings
       dest
       nargs
       const
       default
       type
       choices
       required
       help
       metavar)
      (arg-types #f #f #f #f #f #f #f #f #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults
       #f
       #f
       #f
       (NameConstant None)
       (NameConstant None)
       (NameConstant None)
       (NameConstant None)
       (NameConstant None)
       (NameConstant False)
       (NameConstant None)
       (NameConstant None))))
    (body
     (If
      (test (Compare (left (Name nargs)) (ops Eq) (comparators (Num 0))))
      (body
       (Raise
        (Call
         (func (Name ValueError))
         (args
          (Str
           "nargs for append actions must be > 0; if arg strings are not supplying the value to append, the append const action may be more appropriate"))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (orelse))
     (If
      (test
       (BoolOp
        And
        (Compare
         (left (Name const))
         (ops IsNot)
         (comparators (NameConstant None)))
        (Compare
         (left (Name nargs))
         (ops NotEq)
         (comparators (Name OPTIONAL)))))
      (body
       (Raise
        (Call
         (func (Name ValueError))
         (args
          (BinOp (Str "nargs must be %r to supply const") Mod (Name OPTIONAL)))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (orelse))
     (Expr
      (Call
       (func
        (Attribute
         (Call
          (func (Name super))
          (args (Name _AppendAction) (Name self))
          (keywords)
          (starargs #f)
          (kwargs #f))
         __init__))
       (args)
       (keywords
        (option_strings (Name option_strings))
        (dest (Name dest))
        (nargs (Name nargs))
        (const (Name const))
        (default (Name default))
        (type (Name type))
        (choices (Name choices))
        (required (Name required))
        (help (Name help))
        (metavar (Name metavar)))
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name __call__)
    (args
     (Arguments
      (args self parser namespace values option_string)
      (arg-types #f #f #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f #f #f (NameConstant None))))
    (body
     (Assign
      (targets (Name items))
      (value
       (Call
        (func (Attribute (Name _copy) copy))
        (args
         (Call
          (func (Name _ensure_value))
          (args (Name namespace) (Attribute (Name self) dest) (List))
          (keywords)
          (starargs #f)
          (kwargs #f)))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (Expr
      (Call
       (func (Attribute (Name items) append))
       (args (Name values))
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Expr
      (Call
       (func (Name setattr))
       (args (Name namespace) (Attribute (Name self) dest) (Name items))
       (keywords)
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f)))
  (decorator_list))
 (ClassDef
  (name _AppendConstAction)
  (bases (Name Action))
  (keywords)
  (starargs #f)
  (kwargs #f)
  (body
   (FunctionDef
    (name __init__)
    (args
     (Arguments
      (args self option_strings dest const default required help metavar)
      (arg-types #f #f #f #f #f #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults
       #f
       #f
       #f
       #f
       (NameConstant None)
       (NameConstant False)
       (NameConstant None)
       (NameConstant None))))
    (body
     (Expr
      (Call
       (func
        (Attribute
         (Call
          (func (Name super))
          (args (Name _AppendConstAction) (Name self))
          (keywords)
          (starargs #f)
          (kwargs #f))
         __init__))
       (args)
       (keywords
        (option_strings (Name option_strings))
        (dest (Name dest))
        (nargs (Num 0))
        (const (Name const))
        (default (Name default))
        (required (Name required))
        (help (Name help))
        (metavar (Name metavar)))
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name __call__)
    (args
     (Arguments
      (args self parser namespace values option_string)
      (arg-types #f #f #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f #f #f (NameConstant None))))
    (body
     (Assign
      (targets (Name items))
      (value
       (Call
        (func (Attribute (Name _copy) copy))
        (args
         (Call
          (func (Name _ensure_value))
          (args (Name namespace) (Attribute (Name self) dest) (List))
          (keywords)
          (starargs #f)
          (kwargs #f)))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (Expr
      (Call
       (func (Attribute (Name items) append))
       (args (Attribute (Name self) const))
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Expr
      (Call
       (func (Name setattr))
       (args (Name namespace) (Attribute (Name self) dest) (Name items))
       (keywords)
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f)))
  (decorator_list))
 (ClassDef
  (name _CountAction)
  (bases (Name Action))
  (keywords)
  (starargs #f)
  (kwargs #f)
  (body
   (FunctionDef
    (name __init__)
    (args
     (Arguments
      (args self option_strings dest default required help)
      (arg-types #f #f #f #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults
       #f
       #f
       #f
       (NameConstant None)
       (NameConstant False)
       (NameConstant None))))
    (body
     (Expr
      (Call
       (func
        (Attribute
         (Call
          (func (Name super))
          (args (Name _CountAction) (Name self))
          (keywords)
          (starargs #f)
          (kwargs #f))
         __init__))
       (args)
       (keywords
        (option_strings (Name option_strings))
        (dest (Name dest))
        (nargs (Num 0))
        (default (Name default))
        (required (Name required))
        (help (Name help)))
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name __call__)
    (args
     (Arguments
      (args self parser namespace values option_string)
      (arg-types #f #f #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f #f #f (NameConstant None))))
    (body
     (Assign
      (targets (Name new_count))
      (value
       (BinOp
        (Call
         (func (Name _ensure_value))
         (args (Name namespace) (Attribute (Name self) dest) (Num 0))
         (keywords)
         (starargs #f)
         (kwargs #f))
        Add
        (Num 1))))
     (Expr
      (Call
       (func (Name setattr))
       (args (Name namespace) (Attribute (Name self) dest) (Name new_count))
       (keywords)
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f)))
  (decorator_list))
 (ClassDef
  (name _HelpAction)
  (bases (Name Action))
  (keywords)
  (starargs #f)
  (kwargs #f)
  (body
   (FunctionDef
    (name __init__)
    (args
     (Arguments
      (args self option_strings dest default help)
      (arg-types #f #f #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f (Name SUPPRESS) (Name SUPPRESS) (NameConstant None))))
    (body
     (Expr
      (Call
       (func
        (Attribute
         (Call
          (func (Name super))
          (args (Name _HelpAction) (Name self))
          (keywords)
          (starargs #f)
          (kwargs #f))
         __init__))
       (args)
       (keywords
        (option_strings (Name option_strings))
        (dest (Name dest))
        (default (Name default))
        (nargs (Num 0))
        (help (Name help)))
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name __call__)
    (args
     (Arguments
      (args self parser namespace values option_string)
      (arg-types #f #f #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f #f #f (NameConstant None))))
    (body
     (Expr
      (Call
       (func (Attribute (Name parser) print_help))
       (args)
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Expr
      (Call
       (func (Attribute (Name parser) exit))
       (args)
       (keywords)
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f)))
  (decorator_list))
 (ClassDef
  (name _VersionAction)
  (bases (Name Action))
  (keywords)
  (starargs #f)
  (kwargs #f)
  (body
   (FunctionDef
    (name __init__)
    (args
     (Arguments
      (args self option_strings version dest default help)
      (arg-types #f #f #f #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults
       #f
       #f
       (NameConstant None)
       (Name SUPPRESS)
       (Name SUPPRESS)
       (Str "show program's version number and exit"))))
    (body
     (Expr
      (Call
       (func
        (Attribute
         (Call
          (func (Name super))
          (args (Name _VersionAction) (Name self))
          (keywords)
          (starargs #f)
          (kwargs #f))
         __init__))
       (args)
       (keywords
        (option_strings (Name option_strings))
        (dest (Name dest))
        (default (Name default))
        (nargs (Num 0))
        (help (Name help)))
       (starargs #f)
       (kwargs #f)))
     (Assign (targets (Attribute (Name self) version)) (value (Name version))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name __call__)
    (args
     (Arguments
      (args self parser namespace values option_string)
      (arg-types #f #f #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f #f #f (NameConstant None))))
    (body
     (Assign (targets (Name version)) (value (Attribute (Name self) version)))
     (If
      (test
       (Compare
        (left (Name version))
        (ops Is)
        (comparators (NameConstant None))))
      (body
       (Assign
        (targets (Name version))
        (value (Attribute (Name parser) version))))
      (orelse))
     (Assign
      (targets (Name formatter))
      (value
       (Call
        (func (Attribute (Name parser) _get_formatter))
        (args)
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (Expr
      (Call
       (func (Attribute (Name formatter) add_text))
       (args (Name version))
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Expr
      (Call
       (func (Attribute (Name parser) _print_message))
       (args
        (Call
         (func (Attribute (Name formatter) format_help))
         (args)
         (keywords)
         (starargs #f)
         (kwargs #f))
        (Attribute (Name _sys) stdout))
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Expr
      (Call
       (func (Attribute (Name parser) exit))
       (args)
       (keywords)
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f)))
  (decorator_list))
 (ClassDef
  (name _SubParsersAction)
  (bases (Name Action))
  (keywords)
  (starargs #f)
  (kwargs #f)
  (body
   (ClassDef
    (name _ChoicesPseudoAction)
    (bases (Name Action))
    (keywords)
    (starargs #f)
    (kwargs #f)
    (body
     (FunctionDef
      (name __init__)
      (args
       (Arguments
        (args self name aliases help)
        (arg-types #f #f #f #f)
        (vararg #f)
        (kwonlyargs)
        (kwonlyarg-types)
        (kw_defaults)
        (kwarg #f)
        (defaults #f #f #f #f)))
      (body
       (Assign (targets (Name metavar) (Name dest)) (value (Name name)))
       (If
        (test (Name aliases))
        (body
         (AugAssign
          (Name metavar)
          Add
          (BinOp
           (Str " (%s)")
           Mod
           (Call
            (func (Attribute (Str ", ") join))
            (args (Name aliases))
            (keywords)
            (starargs #f)
            (kwargs #f)))))
        (orelse))
       (Assign
        (targets (Name sup))
        (value
         (Call
          (func (Name super))
          (args
           (Attribute (Name _SubParsersAction) _ChoicesPseudoAction)
           (Name self))
          (keywords)
          (starargs #f)
          (kwargs #f))))
       (Expr
        (Call
         (func (Attribute (Name sup) __init__))
         (args)
         (keywords
          (option_strings (List))
          (dest (Name dest))
          (help (Name help))
          (metavar (Name metavar)))
         (starargs #f)
         (kwargs #f))))
      (decorator_list)
      (returns #f)))
    (decorator_list))
   (FunctionDef
    (name __init__)
    (args
     (Arguments
      (args self option_strings prog parser_class dest help metavar)
      (arg-types #f #f #f #f #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults
       #f
       #f
       #f
       #f
       (Name SUPPRESS)
       (NameConstant None)
       (NameConstant None))))
    (body
     (Assign
      (targets (Attribute (Name self) _prog_prefix))
      (value (Name prog)))
     (Assign
      (targets (Attribute (Name self) _parser_class))
      (value (Name parser_class)))
     (Assign
      (targets (Attribute (Name self) _name_parser_map))
      (value
       (Call
        (func (Attribute (Name _collections) OrderedDict))
        (args)
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (Assign (targets (Attribute (Name self) _choices_actions)) (value (List)))
     (Expr
      (Call
       (func
        (Attribute
         (Call
          (func (Name super))
          (args (Name _SubParsersAction) (Name self))
          (keywords)
          (starargs #f)
          (kwargs #f))
         __init__))
       (args)
       (keywords
        (option_strings (Name option_strings))
        (dest (Name dest))
        (nargs (Name PARSER))
        (choices (Attribute (Name self) _name_parser_map))
        (help (Name help))
        (metavar (Name metavar)))
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name add_parser)
    (args
     (Arguments
      (args self name)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg kwargs)
      (defaults #f #f)))
    (body
     (If
      (test
       (Compare
        (left
         (Call
          (func (Attribute (Name kwargs) get))
          (args (Str "prog"))
          (keywords)
          (starargs #f)
          (kwargs #f)))
        (ops Is)
        (comparators (NameConstant None))))
      (body
       (Assign
        (targets (Subscript (Name kwargs) (Index (Str "prog"))))
        (value
         (BinOp
          (Str "%s %s")
          Mod
          (Tuple (Attribute (Name self) _prog_prefix) (Name name))))))
      (orelse))
     (Assign
      (targets (Name aliases))
      (value
       (Call
        (func (Attribute (Name kwargs) pop))
        (args (Str "aliases") (Tuple))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (If
      (test (Compare (left (Str "help")) (ops In) (comparators (Name kwargs))))
      (body
       (Assign
        (targets (Name help))
        (value
         (Call
          (func (Attribute (Name kwargs) pop))
          (args (Str "help"))
          (keywords)
          (starargs #f)
          (kwargs #f))))
       (Assign
        (targets (Name choice_action))
        (value
         (Call
          (func (Attribute (Name self) _ChoicesPseudoAction))
          (args (Name name) (Name aliases) (Name help))
          (keywords)
          (starargs #f)
          (kwargs #f))))
       (Expr
        (Call
         (func (Attribute (Attribute (Name self) _choices_actions) append))
         (args (Name choice_action))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (orelse))
     (Assign
      (targets (Name parser))
      (value
       (Call
        (func (Attribute (Name self) _parser_class))
        (args)
        (keywords)
        (starargs #f)
        (kwargs (Name kwargs)))))
     (Assign
      (targets
       (Subscript
        (Attribute (Name self) _name_parser_map)
        (Index (Name name))))
      (value (Name parser)))
     (For
      (target (Name alias))
      (iter (Name aliases))
      (body
       (Assign
        (targets
         (Subscript
          (Attribute (Name self) _name_parser_map)
          (Index (Name alias))))
        (value (Name parser))))
      (orelse))
     (Return (Name parser)))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _get_subactions)
    (args
     (Arguments
      (args self)
      (arg-types #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f)))
    (body (Return (Attribute (Name self) _choices_actions)))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name __call__)
    (args
     (Arguments
      (args self parser namespace values option_string)
      (arg-types #f #f #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f #f #f (NameConstant None))))
    (body
     (Assign
      (targets (Name parser_name))
      (value (Subscript (Name values) (Index (Num 0)))))
     (Assign
      (targets (Name arg_strings))
      (value (Subscript (Name values) (Slice (Num 1) #f #f))))
     (If
      (test
       (Compare
        (left (Attribute (Name self) dest))
        (ops IsNot)
        (comparators (Name SUPPRESS))))
      (body
       (Expr
        (Call
         (func (Name setattr))
         (args
          (Name namespace)
          (Attribute (Name self) dest)
          (Name parser_name))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (orelse))
     (Try
      (body
       (Assign
        (targets (Name parser))
        (value
         (Subscript
          (Attribute (Name self) _name_parser_map)
          (Index (Name parser_name))))))
      (handlers
       (except
        (Name KeyError)
        #f
        (Assign
         (targets (Name args))
         (value
          (Dict
           (keys (Str "parser_name") (Str "choices"))
           (values
            (Name parser_name)
            (Call
             (func (Attribute (Str ", ") join))
             (args (Attribute (Name self) _name_parser_map))
             (keywords)
             (starargs #f)
             (kwargs #f))))))
        (Assign
         (targets (Name msg))
         (value
          (BinOp
           (Call
            (func (Name _))
            (args
             (Str "unknown parser %(parser_name)r (choices: %(choices)s)"))
            (keywords)
            (starargs #f)
            (kwargs #f))
           Mod
           (Name args))))
        (Raise
         (Call
          (func (Name ArgumentError))
          (args (Name self) (Name msg))
          (keywords)
          (starargs #f)
          (kwargs #f)))))
      (orelse)
      (finalbody))
     (Assign
      (targets (Tuple (Name subnamespace) (Name arg_strings)))
      (value
       (Call
        (func (Attribute (Name parser) parse_known_args))
        (args (Name arg_strings) (NameConstant None))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (For
      (target (Tuple (Name key) (Name value)))
      (iter
       (Call
        (func
         (Attribute
          (Call
           (func (Name vars))
           (args (Name subnamespace))
           (keywords)
           (starargs #f)
           (kwargs #f))
          items))
        (args)
        (keywords)
        (starargs #f)
        (kwargs #f)))
      (body
       (Expr
        (Call
         (func (Name setattr))
         (args (Name namespace) (Name key) (Name value))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (orelse))
     (If
      (test (Name arg_strings))
      (body
       (Expr
        (Call
         (func
          (Attribute
           (Call
            (func (Name vars))
            (args (Name namespace))
            (keywords)
            (starargs #f)
            (kwargs #f))
           setdefault))
         (args (Name _UNRECOGNIZED_ARGS_ATTR) (List))
         (keywords)
         (starargs #f)
         (kwargs #f)))
       (Expr
        (Call
         (func
          (Attribute
           (Call
            (func (Name getattr))
            (args (Name namespace) (Name _UNRECOGNIZED_ARGS_ATTR))
            (keywords)
            (starargs #f)
            (kwargs #f))
           extend))
         (args (Name arg_strings))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (orelse)))
    (decorator_list)
    (returns #f)))
  (decorator_list))
 (ClassDef
  (name FileType)
  (bases (Name object))
  (keywords)
  (starargs #f)
  (kwargs #f)
  (body
   (Expr
    (Str
     "Factory for creating file object types\n\n    Instances of FileType are typically passed as type= arguments to the\n    ArgumentParser add_argument() method.\n\n    Keyword Arguments:\n        - mode -- A string indicating how the file is to be opened. Accepts the\n            same values as the builtin open() function.\n        - bufsize -- The file's desired buffer size. Accepts the same values as\n            the builtin open() function.\n        - encoding -- The file's encoding. Accepts the same values as the\n            builtin open() function.\n        - errors -- A string indicating how encoding and decoding errors are to\n            be handled. Accepts the same value as the builtin open() function.\n    "))
   (FunctionDef
    (name __init__)
    (args
     (Arguments
      (args self mode bufsize encoding errors)
      (arg-types #f #f #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults
       #f
       (Str "r")
       (UnaryOp USub (Num 1))
       (NameConstant None)
       (NameConstant None))))
    (body
     (Assign (targets (Attribute (Name self) _mode)) (value (Name mode)))
     (Assign (targets (Attribute (Name self) _bufsize)) (value (Name bufsize)))
     (Assign
      (targets (Attribute (Name self) _encoding))
      (value (Name encoding)))
     (Assign (targets (Attribute (Name self) _errors)) (value (Name errors))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name __call__)
    (args
     (Arguments
      (args self string)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f)))
    (body
     (If
      (test (Compare (left (Name string)) (ops Eq) (comparators (Str "-"))))
      (body
       (If
        (test
         (Compare
          (left (Str "r"))
          (ops In)
          (comparators (Attribute (Name self) _mode))))
        (body (Return (Attribute (Name _sys) stdin)))
        (orelse
         (If
          (test
           (Compare
            (left (Str "w"))
            (ops In)
            (comparators (Attribute (Name self) _mode))))
          (body (Return (Attribute (Name _sys) stdout)))
          (orelse
           (Assign
            (targets (Name msg))
            (value
             (BinOp
              (Call
               (func (Name _))
               (args (Str "argument \"-\" with mode %r"))
               (keywords)
               (starargs #f)
               (kwargs #f))
              Mod
              (Attribute (Name self) _mode))))
           (Raise
            (Call
             (func (Name ValueError))
             (args (Name msg))
             (keywords)
             (starargs #f)
             (kwargs #f))))))))
      (orelse))
     (Try
      (body
       (Return
        (Call
         (func (Name open))
         (args
          (Name string)
          (Attribute (Name self) _mode)
          (Attribute (Name self) _bufsize)
          (Attribute (Name self) _encoding)
          (Attribute (Name self) _errors))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (handlers
       (except
        (Name OSError)
        e
        (Assign
         (targets (Name message))
         (value
          (Call
           (func (Name _))
           (args (Str "can't open '%s': %s"))
           (keywords)
           (starargs #f)
           (kwargs #f))))
        (Raise
         (Call
          (func (Name ArgumentTypeError))
          (args (BinOp (Name message) Mod (Tuple (Name string) (Name e))))
          (keywords)
          (starargs #f)
          (kwargs #f)))))
      (orelse)
      (finalbody)))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name __repr__)
    (args
     (Arguments
      (args self)
      (arg-types #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f)))
    (body
     (Assign
      (targets (Name args))
      (value
       (Tuple (Attribute (Name self) _mode) (Attribute (Name self) _bufsize))))
     (Assign
      (targets (Name kwargs))
      (value
       (List
        (Tuple (Str "encoding") (Attribute (Name self) _encoding))
        (Tuple (Str "errors") (Attribute (Name self) _errors)))))
     (Assign
      (targets (Name args_str))
      (value
       (Call
        (func (Attribute (Str ", ") join))
        (args
         (BinOp
          (ListComp
           (Call
            (func (Name repr))
            (args (Name arg))
            (keywords)
            (starargs #f)
            (kwargs #f))
           (for
            (Name arg)
            in
            (Name args)
            if
            (Compare
             (left (Name arg))
             (ops NotEq)
             (comparators (UnaryOp USub (Num 1))))))
          Add
          (ListComp
           (BinOp (Str "%s=%r") Mod (Tuple (Name kw) (Name arg)))
           (for
            (Tuple (Name kw) (Name arg))
            in
            (Name kwargs)
            if
            (Compare
             (left (Name arg))
             (ops IsNot)
             (comparators (NameConstant None)))))))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (Return
      (BinOp
       (Str "%s(%s)")
       Mod
       (Tuple
        (Attribute
         (Call
          (func (Name type))
          (args (Name self))
          (keywords)
          (starargs #f)
          (kwargs #f))
         __name__)
        (Name args_str)))))
    (decorator_list)
    (returns #f)))
  (decorator_list))
 (ClassDef
  (name Namespace)
  (bases (Name _AttributeHolder))
  (keywords)
  (starargs #f)
  (kwargs #f)
  (body
   (Expr
    (Str
     "Simple object for storing attributes.\n\n    Implements equality by attribute names and values, and provides a simple\n    string representation.\n    "))
   (FunctionDef
    (name __init__)
    (args
     (Arguments
      (args self)
      (arg-types #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg kwargs)
      (defaults #f)))
    (body
     (For
      (target (Name name))
      (iter (Name kwargs))
      (body
       (Expr
        (Call
         (func (Name setattr))
         (args
          (Name self)
          (Name name)
          (Subscript (Name kwargs) (Index (Name name))))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (orelse)))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name __eq__)
    (args
     (Arguments
      (args self other)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f)))
    (body
     (If
      (test
       (UnaryOp
        Not
        (Call
         (func (Name isinstance))
         (args (Name other) (Name Namespace))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (body (Return (Name NotImplemented)))
      (orelse))
     (Return
      (Compare
       (left
        (Call
         (func (Name vars))
         (args (Name self))
         (keywords)
         (starargs #f)
         (kwargs #f)))
       (ops Eq)
       (comparators
        (Call
         (func (Name vars))
         (args (Name other))
         (keywords)
         (starargs #f)
         (kwargs #f))))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name __ne__)
    (args
     (Arguments
      (args self other)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f)))
    (body
     (If
      (test
       (UnaryOp
        Not
        (Call
         (func (Name isinstance))
         (args (Name other) (Name Namespace))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (body (Return (Name NotImplemented)))
      (orelse))
     (Return
      (UnaryOp
       Not
       (Compare (left (Name self)) (ops Eq) (comparators (Name other))))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name __contains__)
    (args
     (Arguments
      (args self key)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f)))
    (body
     (Return
      (Compare
       (left (Name key))
       (ops In)
       (comparators (Attribute (Name self) __dict__)))))
    (decorator_list)
    (returns #f)))
  (decorator_list))
 (ClassDef
  (name _ActionsContainer)
  (bases (Name object))
  (keywords)
  (starargs #f)
  (kwargs #f)
  (body
   (FunctionDef
    (name __init__)
    (args
     (Arguments
      (args self description prefix_chars argument_default conflict_handler)
      (arg-types #f #f #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f #f #f #f)))
    (body
     (Expr
      (Call
       (func
        (Attribute
         (Call
          (func (Name super))
          (args (Name _ActionsContainer) (Name self))
          (keywords)
          (starargs #f)
          (kwargs #f))
         __init__))
       (args)
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Assign
      (targets (Attribute (Name self) description))
      (value (Name description)))
     (Assign
      (targets (Attribute (Name self) argument_default))
      (value (Name argument_default)))
     (Assign
      (targets (Attribute (Name self) prefix_chars))
      (value (Name prefix_chars)))
     (Assign
      (targets (Attribute (Name self) conflict_handler))
      (value (Name conflict_handler)))
     (Assign
      (targets (Attribute (Name self) _registries))
      (value (Dict (keys) (values))))
     (Expr
      (Call
       (func (Attribute (Name self) register))
       (args (Str "action") (NameConstant None) (Name _StoreAction))
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Expr
      (Call
       (func (Attribute (Name self) register))
       (args (Str "action") (Str "store") (Name _StoreAction))
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Expr
      (Call
       (func (Attribute (Name self) register))
       (args (Str "action") (Str "store_const") (Name _StoreConstAction))
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Expr
      (Call
       (func (Attribute (Name self) register))
       (args (Str "action") (Str "store_true") (Name _StoreTrueAction))
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Expr
      (Call
       (func (Attribute (Name self) register))
       (args (Str "action") (Str "store_false") (Name _StoreFalseAction))
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Expr
      (Call
       (func (Attribute (Name self) register))
       (args (Str "action") (Str "append") (Name _AppendAction))
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Expr
      (Call
       (func (Attribute (Name self) register))
       (args (Str "action") (Str "append_const") (Name _AppendConstAction))
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Expr
      (Call
       (func (Attribute (Name self) register))
       (args (Str "action") (Str "count") (Name _CountAction))
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Expr
      (Call
       (func (Attribute (Name self) register))
       (args (Str "action") (Str "help") (Name _HelpAction))
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Expr
      (Call
       (func (Attribute (Name self) register))
       (args (Str "action") (Str "version") (Name _VersionAction))
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Expr
      (Call
       (func (Attribute (Name self) register))
       (args (Str "action") (Str "parsers") (Name _SubParsersAction))
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Expr
      (Call
       (func (Attribute (Name self) _get_handler))
       (args)
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Assign (targets (Attribute (Name self) _actions)) (value (List)))
     (Assign
      (targets (Attribute (Name self) _option_string_actions))
      (value (Dict (keys) (values))))
     (Assign (targets (Attribute (Name self) _action_groups)) (value (List)))
     (Assign
      (targets (Attribute (Name self) _mutually_exclusive_groups))
      (value (List)))
     (Assign
      (targets (Attribute (Name self) _defaults))
      (value (Dict (keys) (values))))
     (Assign
      (targets (Attribute (Name self) _negative_number_matcher))
      (value
       (Call
        (func (Attribute (Name _re) compile))
        (args (Str "^-\\d+$|^-\\d*\\.\\d+$"))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (Assign
      (targets (Attribute (Name self) _has_negative_number_optionals))
      (value (List))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name register)
    (args
     (Arguments
      (args self registry_name value object)
      (arg-types #f #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f #f #f)))
    (body
     (Assign
      (targets (Name registry))
      (value
       (Call
        (func (Attribute (Attribute (Name self) _registries) setdefault))
        (args (Name registry_name) (Dict (keys) (values)))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (Assign
      (targets (Subscript (Name registry) (Index (Name value))))
      (value (Name object))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _registry_get)
    (args
     (Arguments
      (args self registry_name value default)
      (arg-types #f #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f #f (NameConstant None))))
    (body
     (Return
      (Call
       (func
        (Attribute
         (Subscript
          (Attribute (Name self) _registries)
          (Index (Name registry_name)))
         get))
       (args (Name value) (Name default))
       (keywords)
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name set_defaults)
    (args
     (Arguments
      (args self)
      (arg-types #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg kwargs)
      (defaults #f)))
    (body
     (Expr
      (Call
       (func (Attribute (Attribute (Name self) _defaults) update))
       (args (Name kwargs))
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (For
      (target (Name action))
      (iter (Attribute (Name self) _actions))
      (body
       (If
        (test
         (Compare
          (left (Attribute (Name action) dest))
          (ops In)
          (comparators (Name kwargs))))
        (body
         (Assign
          (targets (Attribute (Name action) default))
          (value
           (Subscript (Name kwargs) (Index (Attribute (Name action) dest))))))
        (orelse)))
      (orelse)))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name get_default)
    (args
     (Arguments
      (args self dest)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f)))
    (body
     (For
      (target (Name action))
      (iter (Attribute (Name self) _actions))
      (body
       (If
        (test
         (BoolOp
          And
          (Compare
           (left (Attribute (Name action) dest))
           (ops Eq)
           (comparators (Name dest)))
          (Compare
           (left (Attribute (Name action) default))
           (ops IsNot)
           (comparators (NameConstant None)))))
        (body (Return (Attribute (Name action) default)))
        (orelse)))
      (orelse))
     (Return
      (Call
       (func (Attribute (Attribute (Name self) _defaults) get))
       (args (Name dest) (NameConstant None))
       (keywords)
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name add_argument)
    (args
     (Arguments
      (args self)
      (arg-types #f)
      (vararg args)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg kwargs)
      (defaults #f)))
    (body
     (Expr
      (Str
       "\n        add_argument(dest, ..., name=value, ...)\n        add_argument(option_string, option_string, ..., name=value, ...)\n        "))
     (Assign
      (targets (Name chars))
      (value (Attribute (Name self) prefix_chars)))
     (If
      (test
       (BoolOp
        Or
        (UnaryOp Not (Name args))
        (BoolOp
         And
         (Compare
          (left
           (Call
            (func (Name len))
            (args (Name args))
            (keywords)
            (starargs #f)
            (kwargs #f)))
          (ops Eq)
          (comparators (Num 1)))
         (Compare
          (left
           (Subscript (Subscript (Name args) (Index (Num 0))) (Index (Num 0))))
          (ops NotIn)
          (comparators (Name chars))))))
      (body
       (If
        (test
         (BoolOp
          And
          (Name args)
          (Compare (left (Str "dest")) (ops In) (comparators (Name kwargs)))))
        (body
         (Raise
          (Call
           (func (Name ValueError))
           (args (Str "dest supplied twice for positional argument"))
           (keywords)
           (starargs #f)
           (kwargs #f))))
        (orelse))
       (Assign
        (targets (Name kwargs))
        (value
         (Call
          (func (Attribute (Name self) _get_positional_kwargs))
          (args)
          (keywords)
          (starargs (Name args))
          (kwargs (Name kwargs))))))
      (orelse
       (Assign
        (targets (Name kwargs))
        (value
         (Call
          (func (Attribute (Name self) _get_optional_kwargs))
          (args)
          (keywords)
          (starargs (Name args))
          (kwargs (Name kwargs)))))))
     (If
      (test
       (Compare
        (left (Str "default"))
        (ops NotIn)
        (comparators (Name kwargs))))
      (body
       (Assign
        (targets (Name dest))
        (value (Subscript (Name kwargs) (Index (Str "dest")))))
       (If
        (test
         (Compare
          (left (Name dest))
          (ops In)
          (comparators (Attribute (Name self) _defaults))))
        (body
         (Assign
          (targets (Subscript (Name kwargs) (Index (Str "default"))))
          (value
           (Subscript (Attribute (Name self) _defaults) (Index (Name dest))))))
        (orelse
         (If
          (test
           (Compare
            (left (Attribute (Name self) argument_default))
            (ops IsNot)
            (comparators (NameConstant None))))
          (body
           (Assign
            (targets (Subscript (Name kwargs) (Index (Str "default"))))
            (value (Attribute (Name self) argument_default))))
          (orelse)))))
      (orelse))
     (Assign
      (targets (Name action_class))
      (value
       (Call
        (func (Attribute (Name self) _pop_action_class))
        (args (Name kwargs))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (If
      (test
       (UnaryOp
        Not
        (Call
         (func (Name callable))
         (args (Name action_class))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (body
       (Raise
        (Call
         (func (Name ValueError))
         (args
          (BinOp
           (Str "unknown action \"%s\"")
           Mod
           (Tuple (Name action_class))))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (orelse))
     (Assign
      (targets (Name action))
      (value
       (Call
        (func (Name action_class))
        (args)
        (keywords)
        (starargs #f)
        (kwargs (Name kwargs)))))
     (Assign
      (targets (Name type_func))
      (value
       (Call
        (func (Attribute (Name self) _registry_get))
        (args
         (Str "type")
         (Attribute (Name action) type)
         (Attribute (Name action) type))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (If
      (test
       (UnaryOp
        Not
        (Call
         (func (Name callable))
         (args (Name type_func))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (body
       (Raise
        (Call
         (func (Name ValueError))
         (args (BinOp (Str "%r is not callable") Mod (Tuple (Name type_func))))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (orelse))
     (If
      (test
       (Call
        (func (Name hasattr))
        (args (Name self) (Str "_get_formatter"))
        (keywords)
        (starargs #f)
        (kwargs #f)))
      (body
       (Try
        (body
         (Expr
          (Call
           (func
            (Attribute
             (Call
              (func (Attribute (Name self) _get_formatter))
              (args)
              (keywords)
              (starargs #f)
              (kwargs #f))
             _format_args))
           (args (Name action) (NameConstant None))
           (keywords)
           (starargs #f)
           (kwargs #f))))
        (handlers
         (except
          (Name TypeError)
          #f
          (Raise
           (Call
            (func (Name ValueError))
            (args (Str "length of metavar tuple does not match nargs"))
            (keywords)
            (starargs #f)
            (kwargs #f)))))
        (orelse)
        (finalbody)))
      (orelse))
     (Return
      (Call
       (func (Attribute (Name self) _add_action))
       (args (Name action))
       (keywords)
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name add_argument_group)
    (args
     (Arguments
      (args self)
      (arg-types #f)
      (vararg args)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg kwargs)
      (defaults #f)))
    (body
     (Assign
      (targets (Name group))
      (value
       (Call
        (func (Name _ArgumentGroup))
        (args (Name self))
        (keywords)
        (starargs (Name args))
        (kwargs (Name kwargs)))))
     (Expr
      (Call
       (func (Attribute (Attribute (Name self) _action_groups) append))
       (args (Name group))
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Return (Name group)))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name add_mutually_exclusive_group)
    (args
     (Arguments
      (args self)
      (arg-types #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg kwargs)
      (defaults #f)))
    (body
     (Assign
      (targets (Name group))
      (value
       (Call
        (func (Name _MutuallyExclusiveGroup))
        (args (Name self))
        (keywords)
        (starargs #f)
        (kwargs (Name kwargs)))))
     (Expr
      (Call
       (func
        (Attribute (Attribute (Name self) _mutually_exclusive_groups) append))
       (args (Name group))
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Return (Name group)))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _add_action)
    (args
     (Arguments
      (args self action)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f)))
    (body
     (Expr
      (Call
       (func (Attribute (Name self) _check_conflict))
       (args (Name action))
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Expr
      (Call
       (func (Attribute (Attribute (Name self) _actions) append))
       (args (Name action))
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Assign (targets (Attribute (Name action) container)) (value (Name self)))
     (For
      (target (Name option_string))
      (iter (Attribute (Name action) option_strings))
      (body
       (Assign
        (targets
         (Subscript
          (Attribute (Name self) _option_string_actions)
          (Index (Name option_string))))
        (value (Name action))))
      (orelse))
     (For
      (target (Name option_string))
      (iter (Attribute (Name action) option_strings))
      (body
       (If
        (test
         (Call
          (func
           (Attribute (Attribute (Name self) _negative_number_matcher) match))
          (args (Name option_string))
          (keywords)
          (starargs #f)
          (kwargs #f)))
        (body
         (If
          (test
           (UnaryOp
            Not
            (Attribute (Name self) _has_negative_number_optionals)))
          (body
           (Expr
            (Call
             (func
              (Attribute
               (Attribute (Name self) _has_negative_number_optionals)
               append))
             (args (NameConstant True))
             (keywords)
             (starargs #f)
             (kwargs #f))))
          (orelse)))
        (orelse)))
      (orelse))
     (Return (Name action)))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _remove_action)
    (args
     (Arguments
      (args self action)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f)))
    (body
     (Expr
      (Call
       (func (Attribute (Attribute (Name self) _actions) remove))
       (args (Name action))
       (keywords)
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _add_container_actions)
    (args
     (Arguments
      (args self container)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f)))
    (body
     (Assign (targets (Name title_group_map)) (value (Dict (keys) (values))))
     (For
      (target (Name group))
      (iter (Attribute (Name self) _action_groups))
      (body
       (If
        (test
         (Compare
          (left (Attribute (Name group) title))
          (ops In)
          (comparators (Name title_group_map))))
        (body
         (Assign
          (targets (Name msg))
          (value
           (Call
            (func (Name _))
            (args (Str "cannot merge actions - two groups are named %r"))
            (keywords)
            (starargs #f)
            (kwargs #f))))
         (Raise
          (Call
           (func (Name ValueError))
           (args (BinOp (Name msg) Mod (Attribute (Name group) title)))
           (keywords)
           (starargs #f)
           (kwargs #f))))
        (orelse))
       (Assign
        (targets
         (Subscript
          (Name title_group_map)
          (Index (Attribute (Name group) title))))
        (value (Name group))))
      (orelse))
     (Assign (targets (Name group_map)) (value (Dict (keys) (values))))
     (For
      (target (Name group))
      (iter (Attribute (Name container) _action_groups))
      (body
       (If
        (test
         (Compare
          (left (Attribute (Name group) title))
          (ops NotIn)
          (comparators (Name title_group_map))))
        (body
         (Assign
          (targets
           (Subscript
            (Name title_group_map)
            (Index (Attribute (Name group) title))))
          (value
           (Call
            (func (Attribute (Name self) add_argument_group))
            (args)
            (keywords
             (title (Attribute (Name group) title))
             (description (Attribute (Name group) description))
             (conflict_handler (Attribute (Name group) conflict_handler)))
            (starargs #f)
            (kwargs #f)))))
        (orelse))
       (For
        (target (Name action))
        (iter (Attribute (Name group) _group_actions))
        (body
         (Assign
          (targets (Subscript (Name group_map) (Index (Name action))))
          (value
           (Subscript
            (Name title_group_map)
            (Index (Attribute (Name group) title))))))
        (orelse)))
      (orelse))
     (For
      (target (Name group))
      (iter (Attribute (Name container) _mutually_exclusive_groups))
      (body
       (Assign
        (targets (Name mutex_group))
        (value
         (Call
          (func (Attribute (Name self) add_mutually_exclusive_group))
          (args)
          (keywords (required (Attribute (Name group) required)))
          (starargs #f)
          (kwargs #f))))
       (For
        (target (Name action))
        (iter (Attribute (Name group) _group_actions))
        (body
         (Assign
          (targets (Subscript (Name group_map) (Index (Name action))))
          (value (Name mutex_group))))
        (orelse)))
      (orelse))
     (For
      (target (Name action))
      (iter (Attribute (Name container) _actions))
      (body
       (Expr
        (Call
         (func
          (Attribute
           (Call
            (func (Attribute (Name group_map) get))
            (args (Name action) (Name self))
            (keywords)
            (starargs #f)
            (kwargs #f))
           _add_action))
         (args (Name action))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (orelse)))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _get_positional_kwargs)
    (args
     (Arguments
      (args self dest)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg kwargs)
      (defaults #f #f)))
    (body
     (If
      (test
       (Compare (left (Str "required")) (ops In) (comparators (Name kwargs))))
      (body
       (Assign
        (targets (Name msg))
        (value
         (Call
          (func (Name _))
          (args (Str "'required' is an invalid argument for positionals"))
          (keywords)
          (starargs #f)
          (kwargs #f))))
       (Raise
        (Call
         (func (Name TypeError))
         (args (Name msg))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (orelse))
     (If
      (test
       (Compare
        (left
         (Call
          (func (Attribute (Name kwargs) get))
          (args (Str "nargs"))
          (keywords)
          (starargs #f)
          (kwargs #f)))
        (ops NotIn)
        (comparators (List (Name OPTIONAL) (Name ZERO_OR_MORE)))))
      (body
       (Assign
        (targets (Subscript (Name kwargs) (Index (Str "required"))))
        (value (NameConstant True))))
      (orelse))
     (If
      (test
       (BoolOp
        And
        (Compare
         (left
          (Call
           (func (Attribute (Name kwargs) get))
           (args (Str "nargs"))
           (keywords)
           (starargs #f)
           (kwargs #f)))
         (ops Eq)
         (comparators (Name ZERO_OR_MORE)))
        (Compare
         (left (Str "default"))
         (ops NotIn)
         (comparators (Name kwargs)))))
      (body
       (Assign
        (targets (Subscript (Name kwargs) (Index (Str "required"))))
        (value (NameConstant True))))
      (orelse))
     (Return
      (Call
       (func (Name dict))
       (args (Name kwargs))
       (keywords (dest (Name dest)) (option_strings (List)))
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _get_optional_kwargs)
    (args
     (Arguments
      (args self)
      (arg-types #f)
      (vararg args)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg kwargs)
      (defaults #f)))
    (body
     (Assign (targets (Name option_strings)) (value (List)))
     (Assign (targets (Name long_option_strings)) (value (List)))
     (For
      (target (Name option_string))
      (iter (Name args))
      (body
       (If
        (test
         (UnaryOp
          Not
          (Compare
           (left (Subscript (Name option_string) (Index (Num 0))))
           (ops In)
           (comparators (Attribute (Name self) prefix_chars)))))
        (body
         (Assign
          (targets (Name args))
          (value
           (Dict
            (keys (Str "option") (Str "prefix_chars"))
            (values
             (Name option_string)
             (Attribute (Name self) prefix_chars)))))
         (Assign
          (targets (Name msg))
          (value
           (Call
            (func (Name _))
            (args
             (Str
              "invalid option string %(option)r: must start with a character %(prefix_chars)r"))
            (keywords)
            (starargs #f)
            (kwargs #f))))
         (Raise
          (Call
           (func (Name ValueError))
           (args (BinOp (Name msg) Mod (Name args)))
           (keywords)
           (starargs #f)
           (kwargs #f))))
        (orelse))
       (Expr
        (Call
         (func (Attribute (Name option_strings) append))
         (args (Name option_string))
         (keywords)
         (starargs #f)
         (kwargs #f)))
       (If
        (test
         (Compare
          (left (Subscript (Name option_string) (Index (Num 0))))
          (ops In)
          (comparators (Attribute (Name self) prefix_chars))))
        (body
         (If
          (test
           (Compare
            (left
             (Call
              (func (Name len))
              (args (Name option_string))
              (keywords)
              (starargs #f)
              (kwargs #f)))
            (ops Gt)
            (comparators (Num 1))))
          (body
           (If
            (test
             (Compare
              (left (Subscript (Name option_string) (Index (Num 1))))
              (ops In)
              (comparators (Attribute (Name self) prefix_chars))))
            (body
             (Expr
              (Call
               (func (Attribute (Name long_option_strings) append))
               (args (Name option_string))
               (keywords)
               (starargs #f)
               (kwargs #f))))
            (orelse)))
          (orelse)))
        (orelse)))
      (orelse))
     (Assign
      (targets (Name dest))
      (value
       (Call
        (func (Attribute (Name kwargs) pop))
        (args (Str "dest") (NameConstant None))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (If
      (test
       (Compare (left (Name dest)) (ops Is) (comparators (NameConstant None))))
      (body
       (If
        (test (Name long_option_strings))
        (body
         (Assign
          (targets (Name dest_option_string))
          (value (Subscript (Name long_option_strings) (Index (Num 0))))))
        (orelse
         (Assign
          (targets (Name dest_option_string))
          (value (Subscript (Name option_strings) (Index (Num 0)))))))
       (Assign
        (targets (Name dest))
        (value
         (Call
          (func (Attribute (Name dest_option_string) lstrip))
          (args (Attribute (Name self) prefix_chars))
          (keywords)
          (starargs #f)
          (kwargs #f))))
       (If
        (test (UnaryOp Not (Name dest)))
        (body
         (Assign
          (targets (Name msg))
          (value
           (Call
            (func (Name _))
            (args (Str "dest= is required for options like %r"))
            (keywords)
            (starargs #f)
            (kwargs #f))))
         (Raise
          (Call
           (func (Name ValueError))
           (args (BinOp (Name msg) Mod (Name option_string)))
           (keywords)
           (starargs #f)
           (kwargs #f))))
        (orelse))
       (Assign
        (targets (Name dest))
        (value
         (Call
          (func (Attribute (Name dest) replace))
          (args (Str "-") (Str "_"))
          (keywords)
          (starargs #f)
          (kwargs #f)))))
      (orelse))
     (Return
      (Call
       (func (Name dict))
       (args (Name kwargs))
       (keywords (dest (Name dest)) (option_strings (Name option_strings)))
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _pop_action_class)
    (args
     (Arguments
      (args self kwargs default)
      (arg-types #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f (NameConstant None))))
    (body
     (Assign
      (targets (Name action))
      (value
       (Call
        (func (Attribute (Name kwargs) pop))
        (args (Str "action") (Name default))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (Return
      (Call
       (func (Attribute (Name self) _registry_get))
       (args (Str "action") (Name action) (Name action))
       (keywords)
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _get_handler)
    (args
     (Arguments
      (args self)
      (arg-types #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f)))
    (body
     (Assign
      (targets (Name handler_func_name))
      (value
       (BinOp
        (Str "_handle_conflict_%s")
        Mod
        (Attribute (Name self) conflict_handler))))
     (Try
      (body
       (Return
        (Call
         (func (Name getattr))
         (args (Name self) (Name handler_func_name))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (handlers
       (except
        (Name AttributeError)
        #f
        (Assign
         (targets (Name msg))
         (value
          (Call
           (func (Name _))
           (args (Str "invalid conflict_resolution value: %r"))
           (keywords)
           (starargs #f)
           (kwargs #f))))
        (Raise
         (Call
          (func (Name ValueError))
          (args
           (BinOp (Name msg) Mod (Attribute (Name self) conflict_handler)))
          (keywords)
          (starargs #f)
          (kwargs #f)))))
      (orelse)
      (finalbody)))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _check_conflict)
    (args
     (Arguments
      (args self action)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f)))
    (body
     (Assign (targets (Name confl_optionals)) (value (List)))
     (For
      (target (Name option_string))
      (iter (Attribute (Name action) option_strings))
      (body
       (If
        (test
         (Compare
          (left (Name option_string))
          (ops In)
          (comparators (Attribute (Name self) _option_string_actions))))
        (body
         (Assign
          (targets (Name confl_optional))
          (value
           (Subscript
            (Attribute (Name self) _option_string_actions)
            (Index (Name option_string)))))
         (Expr
          (Call
           (func (Attribute (Name confl_optionals) append))
           (args (Tuple (Name option_string) (Name confl_optional)))
           (keywords)
           (starargs #f)
           (kwargs #f))))
        (orelse)))
      (orelse))
     (If
      (test (Name confl_optionals))
      (body
       (Assign
        (targets (Name conflict_handler))
        (value
         (Call
          (func (Attribute (Name self) _get_handler))
          (args)
          (keywords)
          (starargs #f)
          (kwargs #f))))
       (Expr
        (Call
         (func (Name conflict_handler))
         (args (Name action) (Name confl_optionals))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (orelse)))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _handle_conflict_error)
    (args
     (Arguments
      (args self action conflicting_actions)
      (arg-types #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f #f)))
    (body
     (Assign
      (targets (Name message))
      (value
       (Call
        (func (Name ngettext))
        (args
         (Str "conflicting option string: %s")
         (Str "conflicting option strings: %s")
         (Call
          (func (Name len))
          (args (Name conflicting_actions))
          (keywords)
          (starargs #f)
          (kwargs #f)))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (Assign
      (targets (Name conflict_string))
      (value
       (Call
        (func (Attribute (Str ", ") join))
        (args
         (ListComp
          (Name option_string)
          (for
           (Tuple (Name option_string) (Name action))
           in
           (Name conflicting_actions)
           if)))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (Raise
      (Call
       (func (Name ArgumentError))
       (args (Name action) (BinOp (Name message) Mod (Name conflict_string)))
       (keywords)
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _handle_conflict_resolve)
    (args
     (Arguments
      (args self action conflicting_actions)
      (arg-types #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f #f)))
    (body
     (For
      (target (Tuple (Name option_string) (Name action)))
      (iter (Name conflicting_actions))
      (body
       (Expr
        (Call
         (func (Attribute (Attribute (Name action) option_strings) remove))
         (args (Name option_string))
         (keywords)
         (starargs #f)
         (kwargs #f)))
       (Expr
        (Call
         (func (Attribute (Attribute (Name self) _option_string_actions) pop))
         (args (Name option_string) (NameConstant None))
         (keywords)
         (starargs #f)
         (kwargs #f)))
       (If
        (test (UnaryOp Not (Attribute (Name action) option_strings)))
        (body
         (Expr
          (Call
           (func
            (Attribute (Attribute (Name action) container) _remove_action))
           (args (Name action))
           (keywords)
           (starargs #f)
           (kwargs #f))))
        (orelse)))
      (orelse)))
    (decorator_list)
    (returns #f)))
  (decorator_list))
 (ClassDef
  (name _ArgumentGroup)
  (bases (Name _ActionsContainer))
  (keywords)
  (starargs #f)
  (kwargs #f)
  (body
   (FunctionDef
    (name __init__)
    (args
     (Arguments
      (args self container title description)
      (arg-types #f #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg kwargs)
      (defaults #f #f (NameConstant None) (NameConstant None))))
    (body
     (Assign
      (targets (Name update))
      (value (Attribute (Name kwargs) setdefault)))
     (Expr
      (Call
       (func (Name update))
       (args
        (Str "conflict_handler")
        (Attribute (Name container) conflict_handler))
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Expr
      (Call
       (func (Name update))
       (args (Str "prefix_chars") (Attribute (Name container) prefix_chars))
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Expr
      (Call
       (func (Name update))
       (args
        (Str "argument_default")
        (Attribute (Name container) argument_default))
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Assign
      (targets (Name super_init))
      (value
       (Attribute
        (Call
         (func (Name super))
         (args (Name _ArgumentGroup) (Name self))
         (keywords)
         (starargs #f)
         (kwargs #f))
        __init__)))
     (Expr
      (Call
       (func (Name super_init))
       (args)
       (keywords (description (Name description)))
       (starargs #f)
       (kwargs (Name kwargs))))
     (Assign (targets (Attribute (Name self) title)) (value (Name title)))
     (Assign (targets (Attribute (Name self) _group_actions)) (value (List)))
     (Assign
      (targets (Attribute (Name self) _registries))
      (value (Attribute (Name container) _registries)))
     (Assign
      (targets (Attribute (Name self) _actions))
      (value (Attribute (Name container) _actions)))
     (Assign
      (targets (Attribute (Name self) _option_string_actions))
      (value (Attribute (Name container) _option_string_actions)))
     (Assign
      (targets (Attribute (Name self) _defaults))
      (value (Attribute (Name container) _defaults)))
     (Assign
      (targets (Attribute (Name self) _has_negative_number_optionals))
      (value (Attribute (Name container) _has_negative_number_optionals)))
     (Assign
      (targets (Attribute (Name self) _mutually_exclusive_groups))
      (value (Attribute (Name container) _mutually_exclusive_groups))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _add_action)
    (args
     (Arguments
      (args self action)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f)))
    (body
     (Assign
      (targets (Name action))
      (value
       (Call
        (func
         (Attribute
          (Call
           (func (Name super))
           (args (Name _ArgumentGroup) (Name self))
           (keywords)
           (starargs #f)
           (kwargs #f))
          _add_action))
        (args (Name action))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (Expr
      (Call
       (func (Attribute (Attribute (Name self) _group_actions) append))
       (args (Name action))
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Return (Name action)))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _remove_action)
    (args
     (Arguments
      (args self action)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f)))
    (body
     (Expr
      (Call
       (func
        (Attribute
         (Call
          (func (Name super))
          (args (Name _ArgumentGroup) (Name self))
          (keywords)
          (starargs #f)
          (kwargs #f))
         _remove_action))
       (args (Name action))
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Expr
      (Call
       (func (Attribute (Attribute (Name self) _group_actions) remove))
       (args (Name action))
       (keywords)
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f)))
  (decorator_list))
 (ClassDef
  (name _MutuallyExclusiveGroup)
  (bases (Name _ArgumentGroup))
  (keywords)
  (starargs #f)
  (kwargs #f)
  (body
   (FunctionDef
    (name __init__)
    (args
     (Arguments
      (args self container required)
      (arg-types #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f (NameConstant False))))
    (body
     (Expr
      (Call
       (func
        (Attribute
         (Call
          (func (Name super))
          (args (Name _MutuallyExclusiveGroup) (Name self))
          (keywords)
          (starargs #f)
          (kwargs #f))
         __init__))
       (args (Name container))
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Assign
      (targets (Attribute (Name self) required))
      (value (Name required)))
     (Assign
      (targets (Attribute (Name self) _container))
      (value (Name container))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _add_action)
    (args
     (Arguments
      (args self action)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f)))
    (body
     (If
      (test (Attribute (Name action) required))
      (body
       (Assign
        (targets (Name msg))
        (value
         (Call
          (func (Name _))
          (args (Str "mutually exclusive arguments must be optional"))
          (keywords)
          (starargs #f)
          (kwargs #f))))
       (Raise
        (Call
         (func (Name ValueError))
         (args (Name msg))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (orelse))
     (Assign
      (targets (Name action))
      (value
       (Call
        (func (Attribute (Attribute (Name self) _container) _add_action))
        (args (Name action))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (Expr
      (Call
       (func (Attribute (Attribute (Name self) _group_actions) append))
       (args (Name action))
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Return (Name action)))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _remove_action)
    (args
     (Arguments
      (args self action)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f)))
    (body
     (Expr
      (Call
       (func (Attribute (Attribute (Name self) _container) _remove_action))
       (args (Name action))
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Expr
      (Call
       (func (Attribute (Attribute (Name self) _group_actions) remove))
       (args (Name action))
       (keywords)
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f)))
  (decorator_list))
 (ClassDef
  (name ArgumentParser)
  (bases (Name _AttributeHolder) (Name _ActionsContainer))
  (keywords)
  (starargs #f)
  (kwargs #f)
  (body
   (Expr
    (Str
     "Object for parsing command line strings into Python objects.\n\n    Keyword Arguments:\n        - prog -- The name of the program (default: sys.argv[0])\n        - usage -- A usage message (default: auto-generated from arguments)\n        - description -- A description of what the program does\n        - epilog -- Text following the argument descriptions\n        - parents -- Parsers whose arguments should be copied into this one\n        - formatter_class -- HelpFormatter class for printing help messages\n        - prefix_chars -- Characters that prefix optional arguments\n        - fromfile_prefix_chars -- Characters that prefix files containing\n            additional arguments\n        - argument_default -- The default value for all arguments\n        - conflict_handler -- String indicating how to handle conflicts\n        - add_help -- Add a -h/-help option\n    "))
   (FunctionDef
    (name __init__)
    (args
     (Arguments
      (args
       self
       prog
       usage
       description
       epilog
       parents
       formatter_class
       prefix_chars
       fromfile_prefix_chars
       argument_default
       conflict_handler
       add_help)
      (arg-types #f #f #f #f #f #f #f #f #f #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults
       #f
       (NameConstant None)
       (NameConstant None)
       (NameConstant None)
       (NameConstant None)
       (List)
       (Name HelpFormatter)
       (Str "-")
       (NameConstant None)
       (NameConstant None)
       (Str "error")
       (NameConstant True))))
    (body
     (Assign
      (targets (Name superinit))
      (value
       (Attribute
        (Call
         (func (Name super))
         (args (Name ArgumentParser) (Name self))
         (keywords)
         (starargs #f)
         (kwargs #f))
        __init__)))
     (Expr
      (Call
       (func (Name superinit))
       (args)
       (keywords
        (description (Name description))
        (prefix_chars (Name prefix_chars))
        (argument_default (Name argument_default))
        (conflict_handler (Name conflict_handler)))
       (starargs #f)
       (kwargs #f)))
     (If
      (test
       (Compare (left (Name prog)) (ops Is) (comparators (NameConstant None))))
      (body
       (Assign
        (targets (Name prog))
        (value
         (Call
          (func (Attribute (Attribute (Name _os) path) basename))
          (args (Subscript (Attribute (Name _sys) argv) (Index (Num 0))))
          (keywords)
          (starargs #f)
          (kwargs #f)))))
      (orelse))
     (Assign (targets (Attribute (Name self) prog)) (value (Name prog)))
     (Assign (targets (Attribute (Name self) usage)) (value (Name usage)))
     (Assign (targets (Attribute (Name self) epilog)) (value (Name epilog)))
     (Assign
      (targets (Attribute (Name self) formatter_class))
      (value (Name formatter_class)))
     (Assign
      (targets (Attribute (Name self) fromfile_prefix_chars))
      (value (Name fromfile_prefix_chars)))
     (Assign
      (targets (Attribute (Name self) add_help))
      (value (Name add_help)))
     (Assign
      (targets (Name add_group))
      (value (Attribute (Name self) add_argument_group)))
     (Assign
      (targets (Attribute (Name self) _positionals))
      (value
       (Call
        (func (Name add_group))
        (args
         (Call
          (func (Name _))
          (args (Str "positional arguments"))
          (keywords)
          (starargs #f)
          (kwargs #f)))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (Assign
      (targets (Attribute (Name self) _optionals))
      (value
       (Call
        (func (Name add_group))
        (args
         (Call
          (func (Name _))
          (args (Str "optional arguments"))
          (keywords)
          (starargs #f)
          (kwargs #f)))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (Assign
      (targets (Attribute (Name self) _subparsers))
      (value (NameConstant None)))
     (FunctionDef
      (name identity)
      (args
       (Arguments
        (args string)
        (arg-types #f)
        (vararg #f)
        (kwonlyargs)
        (kwonlyarg-types)
        (kw_defaults)
        (kwarg #f)
        (defaults #f)))
      (body (Return (Name string)))
      (decorator_list)
      (returns #f))
     (Expr
      (Call
       (func (Attribute (Name self) register))
       (args (Str "type") (NameConstant None) (Name identity))
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Assign
      (targets (Name default_prefix))
      (value
       (IfExp
        (Compare (left (Str "-")) (ops In) (comparators (Name prefix_chars)))
        (Str "-")
        (Subscript (Name prefix_chars) (Index (Num 0))))))
     (If
      (test (Attribute (Name self) add_help))
      (body
       (Expr
        (Call
         (func (Attribute (Name self) add_argument))
         (args
          (BinOp (Name default_prefix) Add (Str "h"))
          (BinOp (BinOp (Name default_prefix) Mult (Num 2)) Add (Str "help")))
         (keywords
          (action (Str "help"))
          (default (Name SUPPRESS))
          (help
           (Call
            (func (Name _))
            (args (Str "show this help message and exit"))
            (keywords)
            (starargs #f)
            (kwargs #f))))
         (starargs #f)
         (kwargs #f))))
      (orelse))
     (For
      (target (Name parent))
      (iter (Name parents))
      (body
       (Expr
        (Call
         (func (Attribute (Name self) _add_container_actions))
         (args (Name parent))
         (keywords)
         (starargs #f)
         (kwargs #f)))
       (Try
        (body
         (Assign
          (targets (Name defaults))
          (value (Attribute (Name parent) _defaults))))
        (handlers (except (Name AttributeError) #f (Pass)))
        (orelse
         (Expr
          (Call
           (func (Attribute (Attribute (Name self) _defaults) update))
           (args (Name defaults))
           (keywords)
           (starargs #f)
           (kwargs #f))))
        (finalbody)))
      (orelse)))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _get_kwargs)
    (args
     (Arguments
      (args self)
      (arg-types #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f)))
    (body
     (Assign
      (targets (Name names))
      (value
       (List
        (Str "prog")
        (Str "usage")
        (Str "description")
        (Str "formatter_class")
        (Str "conflict_handler")
        (Str "add_help"))))
     (Return
      (ListComp
       (Tuple
        (Name name)
        (Call
         (func (Name getattr))
         (args (Name self) (Name name))
         (keywords)
         (starargs #f)
         (kwargs #f)))
       (for (Name name) in (Name names) if))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name add_subparsers)
    (args
     (Arguments
      (args self)
      (arg-types #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg kwargs)
      (defaults #f)))
    (body
     (If
      (test
       (Compare
        (left (Attribute (Name self) _subparsers))
        (ops IsNot)
        (comparators (NameConstant None))))
      (body
       (Expr
        (Call
         (func (Attribute (Name self) error))
         (args
          (Call
           (func (Name _))
           (args (Str "cannot have multiple subparser arguments"))
           (keywords)
           (starargs #f)
           (kwargs #f)))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (orelse))
     (Expr
      (Call
       (func (Attribute (Name kwargs) setdefault))
       (args
        (Str "parser_class")
        (Call
         (func (Name type))
         (args (Name self))
         (keywords)
         (starargs #f)
         (kwargs #f)))
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (If
      (test
       (BoolOp
        Or
        (Compare (left (Str "title")) (ops In) (comparators (Name kwargs)))
        (Compare
         (left (Str "description"))
         (ops In)
         (comparators (Name kwargs)))))
      (body
       (Assign
        (targets (Name title))
        (value
         (Call
          (func (Name _))
          (args
           (Call
            (func (Attribute (Name kwargs) pop))
            (args (Str "title") (Str "subcommands"))
            (keywords)
            (starargs #f)
            (kwargs #f)))
          (keywords)
          (starargs #f)
          (kwargs #f))))
       (Assign
        (targets (Name description))
        (value
         (Call
          (func (Name _))
          (args
           (Call
            (func (Attribute (Name kwargs) pop))
            (args (Str "description") (NameConstant None))
            (keywords)
            (starargs #f)
            (kwargs #f)))
          (keywords)
          (starargs #f)
          (kwargs #f))))
       (Assign
        (targets (Attribute (Name self) _subparsers))
        (value
         (Call
          (func (Attribute (Name self) add_argument_group))
          (args (Name title) (Name description))
          (keywords)
          (starargs #f)
          (kwargs #f)))))
      (orelse
       (Assign
        (targets (Attribute (Name self) _subparsers))
        (value (Attribute (Name self) _positionals)))))
     (If
      (test
       (Compare
        (left
         (Call
          (func (Attribute (Name kwargs) get))
          (args (Str "prog"))
          (keywords)
          (starargs #f)
          (kwargs #f)))
        (ops Is)
        (comparators (NameConstant None))))
      (body
       (Assign
        (targets (Name formatter))
        (value
         (Call
          (func (Attribute (Name self) _get_formatter))
          (args)
          (keywords)
          (starargs #f)
          (kwargs #f))))
       (Assign
        (targets (Name positionals))
        (value
         (Call
          (func (Attribute (Name self) _get_positional_actions))
          (args)
          (keywords)
          (starargs #f)
          (kwargs #f))))
       (Assign
        (targets (Name groups))
        (value (Attribute (Name self) _mutually_exclusive_groups)))
       (Expr
        (Call
         (func (Attribute (Name formatter) add_usage))
         (args
          (Attribute (Name self) usage)
          (Name positionals)
          (Name groups)
          (Str ""))
         (keywords)
         (starargs #f)
         (kwargs #f)))
       (Assign
        (targets (Subscript (Name kwargs) (Index (Str "prog"))))
        (value
         (Call
          (func
           (Attribute
            (Call
             (func (Attribute (Name formatter) format_help))
             (args)
             (keywords)
             (starargs #f)
             (kwargs #f))
            strip))
          (args)
          (keywords)
          (starargs #f)
          (kwargs #f)))))
      (orelse))
     (Assign
      (targets (Name parsers_class))
      (value
       (Call
        (func (Attribute (Name self) _pop_action_class))
        (args (Name kwargs) (Str "parsers"))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (Assign
      (targets (Name action))
      (value
       (Call
        (func (Name parsers_class))
        (args)
        (keywords (option_strings (List)))
        (starargs #f)
        (kwargs (Name kwargs)))))
     (Expr
      (Call
       (func (Attribute (Attribute (Name self) _subparsers) _add_action))
       (args (Name action))
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Return (Name action)))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _add_action)
    (args
     (Arguments
      (args self action)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f)))
    (body
     (If
      (test (Attribute (Name action) option_strings))
      (body
       (Expr
        (Call
         (func (Attribute (Attribute (Name self) _optionals) _add_action))
         (args (Name action))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (orelse
       (Expr
        (Call
         (func (Attribute (Attribute (Name self) _positionals) _add_action))
         (args (Name action))
         (keywords)
         (starargs #f)
         (kwargs #f)))))
     (Return (Name action)))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _get_optional_actions)
    (args
     (Arguments
      (args self)
      (arg-types #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f)))
    (body
     (Return
      (ListComp
       (Name action)
       (for
        (Name action)
        in
        (Attribute (Name self) _actions)
        if
        (Attribute (Name action) option_strings)))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _get_positional_actions)
    (args
     (Arguments
      (args self)
      (arg-types #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f)))
    (body
     (Return
      (ListComp
       (Name action)
       (for
        (Name action)
        in
        (Attribute (Name self) _actions)
        if
        (UnaryOp Not (Attribute (Name action) option_strings))))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name parse_args)
    (args
     (Arguments
      (args self args namespace)
      (arg-types #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f (NameConstant None) (NameConstant None))))
    (body
     (Assign
      (targets (Tuple (Name args) (Name argv)))
      (value
       (Call
        (func (Attribute (Name self) parse_known_args))
        (args (Name args) (Name namespace))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (If
      (test (Name argv))
      (body
       (Assign
        (targets (Name msg))
        (value
         (Call
          (func (Name _))
          (args (Str "unrecognized arguments: %s"))
          (keywords)
          (starargs #f)
          (kwargs #f))))
       (Expr
        (Call
         (func (Attribute (Name self) error))
         (args
          (BinOp
           (Name msg)
           Mod
           (Call
            (func (Attribute (Str " ") join))
            (args (Name argv))
            (keywords)
            (starargs #f)
            (kwargs #f))))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (orelse))
     (Return (Name args)))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name parse_known_args)
    (args
     (Arguments
      (args self args namespace)
      (arg-types #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f (NameConstant None) (NameConstant None))))
    (body
     (If
      (test
       (Compare (left (Name args)) (ops Is) (comparators (NameConstant None))))
      (body
       (Assign
        (targets (Name args))
        (value
         (Subscript (Attribute (Name _sys) argv) (Slice (Num 1) #f #f)))))
      (orelse
       (Assign
        (targets (Name args))
        (value
         (Call
          (func (Name list))
          (args (Name args))
          (keywords)
          (starargs #f)
          (kwargs #f))))))
     (If
      (test
       (Compare
        (left (Name namespace))
        (ops Is)
        (comparators (NameConstant None))))
      (body
       (Assign
        (targets (Name namespace))
        (value
         (Call
          (func (Name Namespace))
          (args)
          (keywords)
          (starargs #f)
          (kwargs #f)))))
      (orelse))
     (For
      (target (Name action))
      (iter (Attribute (Name self) _actions))
      (body
       (If
        (test
         (Compare
          (left (Attribute (Name action) dest))
          (ops IsNot)
          (comparators (Name SUPPRESS))))
        (body
         (If
          (test
           (UnaryOp
            Not
            (Call
             (func (Name hasattr))
             (args (Name namespace) (Attribute (Name action) dest))
             (keywords)
             (starargs #f)
             (kwargs #f))))
          (body
           (If
            (test
             (Compare
              (left (Attribute (Name action) default))
              (ops IsNot)
              (comparators (Name SUPPRESS))))
            (body
             (Expr
              (Call
               (func (Name setattr))
               (args
                (Name namespace)
                (Attribute (Name action) dest)
                (Attribute (Name action) default))
               (keywords)
               (starargs #f)
               (kwargs #f))))
            (orelse)))
          (orelse)))
        (orelse)))
      (orelse))
     (For
      (target (Name dest))
      (iter (Attribute (Name self) _defaults))
      (body
       (If
        (test
         (UnaryOp
          Not
          (Call
           (func (Name hasattr))
           (args (Name namespace) (Name dest))
           (keywords)
           (starargs #f)
           (kwargs #f))))
        (body
         (Expr
          (Call
           (func (Name setattr))
           (args
            (Name namespace)
            (Name dest)
            (Subscript (Attribute (Name self) _defaults) (Index (Name dest))))
           (keywords)
           (starargs #f)
           (kwargs #f))))
        (orelse)))
      (orelse))
     (Try
      (body
       (Assign
        (targets (Tuple (Name namespace) (Name args)))
        (value
         (Call
          (func (Attribute (Name self) _parse_known_args))
          (args (Name args) (Name namespace))
          (keywords)
          (starargs #f)
          (kwargs #f))))
       (If
        (test
         (Call
          (func (Name hasattr))
          (args (Name namespace) (Name _UNRECOGNIZED_ARGS_ATTR))
          (keywords)
          (starargs #f)
          (kwargs #f)))
        (body
         (Expr
          (Call
           (func (Attribute (Name args) extend))
           (args
            (Call
             (func (Name getattr))
             (args (Name namespace) (Name _UNRECOGNIZED_ARGS_ATTR))
             (keywords)
             (starargs #f)
             (kwargs #f)))
           (keywords)
           (starargs #f)
           (kwargs #f)))
         (Expr
          (Call
           (func (Name delattr))
           (args (Name namespace) (Name _UNRECOGNIZED_ARGS_ATTR))
           (keywords)
           (starargs #f)
           (kwargs #f))))
        (orelse))
       (Return (Tuple (Name namespace) (Name args))))
      (handlers
       (except
        (Name ArgumentError)
        #f
        (Assign
         (targets (Name err))
         (value
          (Subscript
           (Call
            (func (Attribute (Name _sys) exc_info))
            (args)
            (keywords)
            (starargs #f)
            (kwargs #f))
           (Index (Num 1)))))
        (Expr
         (Call
          (func (Attribute (Name self) error))
          (args
           (Call
            (func (Name str))
            (args (Name err))
            (keywords)
            (starargs #f)
            (kwargs #f)))
          (keywords)
          (starargs #f)
          (kwargs #f)))))
      (orelse)
      (finalbody)))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _parse_known_args)
    (args
     (Arguments
      (args self arg_strings namespace)
      (arg-types #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f #f)))
    (body
     (If
      (test
       (Compare
        (left (Attribute (Name self) fromfile_prefix_chars))
        (ops IsNot)
        (comparators (NameConstant None))))
      (body
       (Assign
        (targets (Name arg_strings))
        (value
         (Call
          (func (Attribute (Name self) _read_args_from_files))
          (args (Name arg_strings))
          (keywords)
          (starargs #f)
          (kwargs #f)))))
      (orelse))
     (Assign (targets (Name action_conflicts)) (value (Dict (keys) (values))))
     (For
      (target (Name mutex_group))
      (iter (Attribute (Name self) _mutually_exclusive_groups))
      (body
       (Assign
        (targets (Name group_actions))
        (value (Attribute (Name mutex_group) _group_actions)))
       (For
        (target (Tuple (Name i) (Name mutex_action)))
        (iter
         (Call
          (func (Name enumerate))
          (args (Attribute (Name mutex_group) _group_actions))
          (keywords)
          (starargs #f)
          (kwargs #f)))
        (body
         (Assign
          (targets (Name conflicts))
          (value
           (Call
            (func (Attribute (Name action_conflicts) setdefault))
            (args (Name mutex_action) (List))
            (keywords)
            (starargs #f)
            (kwargs #f))))
         (Expr
          (Call
           (func (Attribute (Name conflicts) extend))
           (args (Subscript (Name group_actions) (Slice #f (Name i) #f)))
           (keywords)
           (starargs #f)
           (kwargs #f)))
         (Expr
          (Call
           (func (Attribute (Name conflicts) extend))
           (args
            (Subscript
             (Name group_actions)
             (Slice (BinOp (Name i) Add (Num 1)) #f #f)))
           (keywords)
           (starargs #f)
           (kwargs #f))))
        (orelse)))
      (orelse))
     (Assign
      (targets (Name option_string_indices))
      (value (Dict (keys) (values))))
     (Assign (targets (Name arg_string_pattern_parts)) (value (List)))
     (Assign
      (targets (Name arg_strings_iter))
      (value
       (Call
        (func (Name iter))
        (args (Name arg_strings))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (For
      (target (Tuple (Name i) (Name arg_string)))
      (iter
       (Call
        (func (Name enumerate))
        (args (Name arg_strings_iter))
        (keywords)
        (starargs #f)
        (kwargs #f)))
      (body
       (If
        (test
         (Compare (left (Name arg_string)) (ops Eq) (comparators (Str "--"))))
        (body
         (Expr
          (Call
           (func (Attribute (Name arg_string_pattern_parts) append))
           (args (Str "-"))
           (keywords)
           (starargs #f)
           (kwargs #f)))
         (For
          (target (Name arg_string))
          (iter (Name arg_strings_iter))
          (body
           (Expr
            (Call
             (func (Attribute (Name arg_string_pattern_parts) append))
             (args (Str "A"))
             (keywords)
             (starargs #f)
             (kwargs #f))))
          (orelse)))
        (orelse
         (Assign
          (targets (Name option_tuple))
          (value
           (Call
            (func (Attribute (Name self) _parse_optional))
            (args (Name arg_string))
            (keywords)
            (starargs #f)
            (kwargs #f))))
         (If
          (test
           (Compare
            (left (Name option_tuple))
            (ops Is)
            (comparators (NameConstant None))))
          (body (Assign (targets (Name pattern)) (value (Str "A"))))
          (orelse
           (Assign
            (targets (Subscript (Name option_string_indices) (Index (Name i))))
            (value (Name option_tuple)))
           (Assign (targets (Name pattern)) (value (Str "O")))))
         (Expr
          (Call
           (func (Attribute (Name arg_string_pattern_parts) append))
           (args (Name pattern))
           (keywords)
           (starargs #f)
           (kwargs #f))))))
      (orelse))
     (Assign
      (targets (Name arg_strings_pattern))
      (value
       (Call
        (func (Attribute (Str "") join))
        (args (Name arg_string_pattern_parts))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (Assign
      (targets (Name seen_actions))
      (value
       (Call (func (Name set)) (args) (keywords) (starargs #f) (kwargs #f))))
     (Assign
      (targets (Name seen_non_default_actions))
      (value
       (Call (func (Name set)) (args) (keywords) (starargs #f) (kwargs #f))))
     (FunctionDef
      (name take_action)
      (args
       (Arguments
        (args action argument_strings option_string)
        (arg-types #f #f #f)
        (vararg #f)
        (kwonlyargs)
        (kwonlyarg-types)
        (kw_defaults)
        (kwarg #f)
        (defaults #f #f (NameConstant None))))
      (body
       (Expr
        (Call
         (func (Attribute (Name seen_actions) add))
         (args (Name action))
         (keywords)
         (starargs #f)
         (kwargs #f)))
       (Assign
        (targets (Name argument_values))
        (value
         (Call
          (func (Attribute (Name self) _get_values))
          (args (Name action) (Name argument_strings))
          (keywords)
          (starargs #f)
          (kwargs #f))))
       (If
        (test
         (Compare
          (left (Name argument_values))
          (ops IsNot)
          (comparators (Attribute (Name action) default))))
        (body
         (Expr
          (Call
           (func (Attribute (Name seen_non_default_actions) add))
           (args (Name action))
           (keywords)
           (starargs #f)
           (kwargs #f)))
         (For
          (target (Name conflict_action))
          (iter
           (Call
            (func (Attribute (Name action_conflicts) get))
            (args (Name action) (List))
            (keywords)
            (starargs #f)
            (kwargs #f)))
          (body
           (If
            (test
             (Compare
              (left (Name conflict_action))
              (ops In)
              (comparators (Name seen_non_default_actions))))
            (body
             (Assign
              (targets (Name msg))
              (value
               (Call
                (func (Name _))
                (args (Str "not allowed with argument %s"))
                (keywords)
                (starargs #f)
                (kwargs #f))))
             (Assign
              (targets (Name action_name))
              (value
               (Call
                (func (Name _get_action_name))
                (args (Name conflict_action))
                (keywords)
                (starargs #f)
                (kwargs #f))))
             (Raise
              (Call
               (func (Name ArgumentError))
               (args (Name action) (BinOp (Name msg) Mod (Name action_name)))
               (keywords)
               (starargs #f)
               (kwargs #f))))
            (orelse)))
          (orelse)))
        (orelse))
       (If
        (test
         (Compare
          (left (Name argument_values))
          (ops IsNot)
          (comparators (Name SUPPRESS))))
        (body
         (Expr
          (Call
           (func (Name action))
           (args
            (Name self)
            (Name namespace)
            (Name argument_values)
            (Name option_string))
           (keywords)
           (starargs #f)
           (kwargs #f))))
        (orelse)))
      (decorator_list)
      (returns #f))
     (FunctionDef
      (name consume_optional)
      (args
       (Arguments
        (args start_index)
        (arg-types #f)
        (vararg #f)
        (kwonlyargs)
        (kwonlyarg-types)
        (kw_defaults)
        (kwarg #f)
        (defaults #f)))
      (body
       (Assign
        (targets (Name option_tuple))
        (value
         (Subscript (Name option_string_indices) (Index (Name start_index)))))
       (Assign
        (targets
         (Tuple (Name action) (Name option_string) (Name explicit_arg)))
        (value (Name option_tuple)))
       (Assign
        (targets (Name match_argument))
        (value (Attribute (Name self) _match_argument)))
       (Assign (targets (Name action_tuples)) (value (List)))
       (While
        (test (NameConstant True))
        (body
         (If
          (test
           (Compare
            (left (Name action))
            (ops Is)
            (comparators (NameConstant None))))
          (body
           (Expr
            (Call
             (func (Attribute (Name extras) append))
             (args (Subscript (Name arg_strings) (Index (Name start_index))))
             (keywords)
             (starargs #f)
             (kwargs #f)))
           (Return (BinOp (Name start_index) Add (Num 1))))
          (orelse))
         (If
          (test
           (Compare
            (left (Name explicit_arg))
            (ops IsNot)
            (comparators (NameConstant None))))
          (body
           (Assign
            (targets (Name arg_count))
            (value
             (Call
              (func (Name match_argument))
              (args (Name action) (Str "A"))
              (keywords)
              (starargs #f)
              (kwargs #f))))
           (Assign
            (targets (Name chars))
            (value (Attribute (Name self) prefix_chars)))
           (If
            (test
             (BoolOp
              And
              (Compare (left (Name arg_count)) (ops Eq) (comparators (Num 0)))
              (Compare
               (left (Subscript (Name option_string) (Index (Num 1))))
               (ops NotIn)
               (comparators (Name chars)))))
            (body
             (Expr
              (Call
               (func (Attribute (Name action_tuples) append))
               (args (Tuple (Name action) (List) (Name option_string)))
               (keywords)
               (starargs #f)
               (kwargs #f)))
             (Assign
              (targets (Name char))
              (value (Subscript (Name option_string) (Index (Num 0)))))
             (Assign
              (targets (Name option_string))
              (value
               (BinOp
                (Name char)
                Add
                (Subscript (Name explicit_arg) (Index (Num 0))))))
             (Assign
              (targets (Name new_explicit_arg))
              (value
               (BoolOp
                Or
                (Subscript (Name explicit_arg) (Slice (Num 1) #f #f))
                (NameConstant None))))
             (Assign
              (targets (Name optionals_map))
              (value (Attribute (Name self) _option_string_actions)))
             (If
              (test
               (Compare
                (left (Name option_string))
                (ops In)
                (comparators (Name optionals_map))))
              (body
               (Assign
                (targets (Name action))
                (value
                 (Subscript
                  (Name optionals_map)
                  (Index (Name option_string)))))
               (Assign
                (targets (Name explicit_arg))
                (value (Name new_explicit_arg))))
              (orelse
               (Assign
                (targets (Name msg))
                (value
                 (Call
                  (func (Name _))
                  (args (Str "ignored explicit argument %r"))
                  (keywords)
                  (starargs #f)
                  (kwargs #f))))
               (Raise
                (Call
                 (func (Name ArgumentError))
                 (args
                  (Name action)
                  (BinOp (Name msg) Mod (Name explicit_arg)))
                 (keywords)
                 (starargs #f)
                 (kwargs #f))))))
            (orelse
             (If
              (test
               (Compare
                (left (Name arg_count))
                (ops Eq)
                (comparators (Num 1))))
              (body
               (Assign
                (targets (Name stop))
                (value (BinOp (Name start_index) Add (Num 1))))
               (Assign
                (targets (Name args))
                (value (List (Name explicit_arg))))
               (Expr
                (Call
                 (func (Attribute (Name action_tuples) append))
                 (args (Tuple (Name action) (Name args) (Name option_string)))
                 (keywords)
                 (starargs #f)
                 (kwargs #f)))
               (Break))
              (orelse
               (Assign
                (targets (Name msg))
                (value
                 (Call
                  (func (Name _))
                  (args (Str "ignored explicit argument %r"))
                  (keywords)
                  (starargs #f)
                  (kwargs #f))))
               (Raise
                (Call
                 (func (Name ArgumentError))
                 (args
                  (Name action)
                  (BinOp (Name msg) Mod (Name explicit_arg)))
                 (keywords)
                 (starargs #f)
                 (kwargs #f))))))))
          (orelse
           (Assign
            (targets (Name start))
            (value (BinOp (Name start_index) Add (Num 1))))
           (Assign
            (targets (Name selected_patterns))
            (value
             (Subscript
              (Name arg_strings_pattern)
              (Slice (Name start) #f #f))))
           (Assign
            (targets (Name arg_count))
            (value
             (Call
              (func (Name match_argument))
              (args (Name action) (Name selected_patterns))
              (keywords)
              (starargs #f)
              (kwargs #f))))
           (Assign
            (targets (Name stop))
            (value (BinOp (Name start) Add (Name arg_count))))
           (Assign
            (targets (Name args))
            (value
             (Subscript
              (Name arg_strings)
              (Slice (Name start) (Name stop) #f))))
           (Expr
            (Call
             (func (Attribute (Name action_tuples) append))
             (args (Tuple (Name action) (Name args) (Name option_string)))
             (keywords)
             (starargs #f)
             (kwargs #f)))
           (Break))))
        (orelse))
       (Assert (Name action_tuples))
       (For
        (target (Tuple (Name action) (Name args) (Name option_string)))
        (iter (Name action_tuples))
        (body
         (Expr
          (Call
           (func (Name take_action))
           (args (Name action) (Name args) (Name option_string))
           (keywords)
           (starargs #f)
           (kwargs #f))))
        (orelse))
       (Return (Name stop)))
      (decorator_list)
      (returns #f))
     (Assign
      (targets (Name positionals))
      (value
       (Call
        (func (Attribute (Name self) _get_positional_actions))
        (args)
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (FunctionDef
      (name consume_positionals)
      (args
       (Arguments
        (args start_index)
        (arg-types #f)
        (vararg #f)
        (kwonlyargs)
        (kwonlyarg-types)
        (kw_defaults)
        (kwarg #f)
        (defaults #f)))
      (body
       (Assign
        (targets (Name match_partial))
        (value (Attribute (Name self) _match_arguments_partial)))
       (Assign
        (targets (Name selected_pattern))
        (value
         (Subscript
          (Name arg_strings_pattern)
          (Slice (Name start_index) #f #f))))
       (Assign
        (targets (Name arg_counts))
        (value
         (Call
          (func (Name match_partial))
          (args (Name positionals) (Name selected_pattern))
          (keywords)
          (starargs #f)
          (kwargs #f))))
       (For
        (target (Tuple (Name action) (Name arg_count)))
        (iter
         (Call
          (func (Name zip))
          (args (Name positionals) (Name arg_counts))
          (keywords)
          (starargs #f)
          (kwargs #f)))
        (body
         (Assign
          (targets (Name args))
          (value
           (Subscript
            (Name arg_strings)
            (Slice
             (Name start_index)
             (BinOp (Name start_index) Add (Name arg_count))
             #f))))
         (AugAssign (Name start_index) Add (Name arg_count))
         (Expr
          (Call
           (func (Name take_action))
           (args (Name action) (Name args))
           (keywords)
           (starargs #f)
           (kwargs #f))))
        (orelse))
       (Assign
        (targets (Subscript (Name positionals) (Slice #f #f #f)))
        (value
         (Subscript
          (Name positionals)
          (Slice
           (Call
            (func (Name len))
            (args (Name arg_counts))
            (keywords)
            (starargs #f)
            (kwargs #f))
           #f
           #f))))
       (Return (Name start_index)))
      (decorator_list)
      (returns #f))
     (Assign (targets (Name extras)) (value (List)))
     (Assign (targets (Name start_index)) (value (Num 0)))
     (If
      (test (Name option_string_indices))
      (body
       (Assign
        (targets (Name max_option_string_index))
        (value
         (Call
          (func (Name max))
          (args (Name option_string_indices))
          (keywords)
          (starargs #f)
          (kwargs #f)))))
      (orelse
       (Assign
        (targets (Name max_option_string_index))
        (value (UnaryOp USub (Num 1))))))
     (While
      (test
       (Compare
        (left (Name start_index))
        (ops LtE)
        (comparators (Name max_option_string_index))))
      (body
       (Assign
        (targets (Name next_option_string_index))
        (value
         (Call
          (func (Name min))
          (args
           (ListComp
            (Name index)
            (for
             (Name index)
             in
             (Name option_string_indices)
             if
             (Compare
              (left (Name index))
              (ops GtE)
              (comparators (Name start_index))))))
          (keywords)
          (starargs #f)
          (kwargs #f))))
       (If
        (test
         (Compare
          (left (Name start_index))
          (ops NotEq)
          (comparators (Name next_option_string_index))))
        (body
         (Assign
          (targets (Name positionals_end_index))
          (value
           (Call
            (func (Name consume_positionals))
            (args (Name start_index))
            (keywords)
            (starargs #f)
            (kwargs #f))))
         (If
          (test
           (Compare
            (left (Name positionals_end_index))
            (ops Gt)
            (comparators (Name start_index))))
          (body
           (Assign
            (targets (Name start_index))
            (value (Name positionals_end_index)))
           (Continue))
          (orelse
           (Assign
            (targets (Name start_index))
            (value (Name positionals_end_index))))))
        (orelse))
       (If
        (test
         (Compare
          (left (Name start_index))
          (ops NotIn)
          (comparators (Name option_string_indices))))
        (body
         (Assign
          (targets (Name strings))
          (value
           (Subscript
            (Name arg_strings)
            (Slice (Name start_index) (Name next_option_string_index) #f))))
         (Expr
          (Call
           (func (Attribute (Name extras) extend))
           (args (Name strings))
           (keywords)
           (starargs #f)
           (kwargs #f)))
         (Assign
          (targets (Name start_index))
          (value (Name next_option_string_index))))
        (orelse))
       (Assign
        (targets (Name start_index))
        (value
         (Call
          (func (Name consume_optional))
          (args (Name start_index))
          (keywords)
          (starargs #f)
          (kwargs #f)))))
      (orelse))
     (Assign
      (targets (Name stop_index))
      (value
       (Call
        (func (Name consume_positionals))
        (args (Name start_index))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (Expr
      (Call
       (func (Attribute (Name extras) extend))
       (args (Subscript (Name arg_strings) (Slice (Name stop_index) #f #f)))
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Assign (targets (Name required_actions)) (value (List)))
     (For
      (target (Name action))
      (iter (Attribute (Name self) _actions))
      (body
       (If
        (test
         (Compare
          (left (Name action))
          (ops NotIn)
          (comparators (Name seen_actions))))
        (body
         (If
          (test (Attribute (Name action) required))
          (body
           (Expr
            (Call
             (func (Attribute (Name required_actions) append))
             (args
              (Call
               (func (Name _get_action_name))
               (args (Name action))
               (keywords)
               (starargs #f)
               (kwargs #f)))
             (keywords)
             (starargs #f)
             (kwargs #f))))
          (orelse
           (If
            (test
             (BoolOp
              And
              (Compare
               (left (Attribute (Name action) default))
               (ops IsNot)
               (comparators (NameConstant None)))
              (Call
               (func (Name isinstance))
               (args (Attribute (Name action) default) (Name str))
               (keywords)
               (starargs #f)
               (kwargs #f))
              (Call
               (func (Name hasattr))
               (args (Name namespace) (Attribute (Name action) dest))
               (keywords)
               (starargs #f)
               (kwargs #f))
              (Compare
               (left (Attribute (Name action) default))
               (ops Is)
               (comparators
                (Call
                 (func (Name getattr))
                 (args (Name namespace) (Attribute (Name action) dest))
                 (keywords)
                 (starargs #f)
                 (kwargs #f))))))
            (body
             (Expr
              (Call
               (func (Name setattr))
               (args
                (Name namespace)
                (Attribute (Name action) dest)
                (Call
                 (func (Attribute (Name self) _get_value))
                 (args (Name action) (Attribute (Name action) default))
                 (keywords)
                 (starargs #f)
                 (kwargs #f)))
               (keywords)
               (starargs #f)
               (kwargs #f))))
            (orelse)))))
        (orelse)))
      (orelse))
     (If
      (test (Name required_actions))
      (body
       (Expr
        (Call
         (func (Attribute (Name self) error))
         (args
          (BinOp
           (Call
            (func (Name _))
            (args (Str "the following arguments are required: %s"))
            (keywords)
            (starargs #f)
            (kwargs #f))
           Mod
           (Call
            (func (Attribute (Str ", ") join))
            (args (Name required_actions))
            (keywords)
            (starargs #f)
            (kwargs #f))))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (orelse))
     (For
      (target (Name group))
      (iter (Attribute (Name self) _mutually_exclusive_groups))
      (body
       (If
        (test (Attribute (Name group) required))
        (body
         (For
          (target (Name action))
          (iter (Attribute (Name group) _group_actions))
          (body
           (If
            (test
             (Compare
              (left (Name action))
              (ops In)
              (comparators (Name seen_non_default_actions))))
            (body (Break))
            (orelse)))
          (orelse
           (Assign
            (targets (Name names))
            (value
             (ListComp
              (Call
               (func (Name _get_action_name))
               (args (Name action))
               (keywords)
               (starargs #f)
               (kwargs #f))
              (for
               (Name action)
               in
               (Attribute (Name group) _group_actions)
               if
               (Compare
                (left (Attribute (Name action) help))
                (ops IsNot)
                (comparators (Name SUPPRESS)))))))
           (Assign
            (targets (Name msg))
            (value
             (Call
              (func (Name _))
              (args (Str "one of the arguments %s is required"))
              (keywords)
              (starargs #f)
              (kwargs #f))))
           (Expr
            (Call
             (func (Attribute (Name self) error))
             (args
              (BinOp
               (Name msg)
               Mod
               (Call
                (func (Attribute (Str " ") join))
                (args (Name names))
                (keywords)
                (starargs #f)
                (kwargs #f))))
             (keywords)
             (starargs #f)
             (kwargs #f))))))
        (orelse)))
      (orelse))
     (Return (Tuple (Name namespace) (Name extras))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _read_args_from_files)
    (args
     (Arguments
      (args self arg_strings)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f)))
    (body
     (Assign (targets (Name new_arg_strings)) (value (List)))
     (For
      (target (Name arg_string))
      (iter (Name arg_strings))
      (body
       (If
        (test
         (BoolOp
          Or
          (UnaryOp Not (Name arg_string))
          (Compare
           (left (Subscript (Name arg_string) (Index (Num 0))))
           (ops NotIn)
           (comparators (Attribute (Name self) fromfile_prefix_chars)))))
        (body
         (Expr
          (Call
           (func (Attribute (Name new_arg_strings) append))
           (args (Name arg_string))
           (keywords)
           (starargs #f)
           (kwargs #f))))
        (orelse
         (Try
          (body
           (With
            (((Call
               (func (Name open))
               (args (Subscript (Name arg_string) (Slice (Num 1) #f #f)))
               (keywords)
               (starargs #f)
               (kwargs #f))
              (Name args_file)))
            (Assign (targets (Name arg_strings)) (value (List)))
            (For
             (target (Name arg_line))
             (iter
              (Call
               (func
                (Attribute
                 (Call
                  (func (Attribute (Name args_file) read))
                  (args)
                  (keywords)
                  (starargs #f)
                  (kwargs #f))
                 splitlines))
               (args)
               (keywords)
               (starargs #f)
               (kwargs #f)))
             (body
              (For
               (target (Name arg))
               (iter
                (Call
                 (func (Attribute (Name self) convert_arg_line_to_args))
                 (args (Name arg_line))
                 (keywords)
                 (starargs #f)
                 (kwargs #f)))
               (body
                (Expr
                 (Call
                  (func (Attribute (Name arg_strings) append))
                  (args (Name arg))
                  (keywords)
                  (starargs #f)
                  (kwargs #f))))
               (orelse)))
             (orelse))
            (Assign
             (targets (Name arg_strings))
             (value
              (Call
               (func (Attribute (Name self) _read_args_from_files))
               (args (Name arg_strings))
               (keywords)
               (starargs #f)
               (kwargs #f))))
            (Expr
             (Call
              (func (Attribute (Name new_arg_strings) extend))
              (args (Name arg_strings))
              (keywords)
              (starargs #f)
              (kwargs #f)))))
          (handlers
           (except
            (Name OSError)
            #f
            (Assign
             (targets (Name err))
             (value
              (Subscript
               (Call
                (func (Attribute (Name _sys) exc_info))
                (args)
                (keywords)
                (starargs #f)
                (kwargs #f))
               (Index (Num 1)))))
            (Expr
             (Call
              (func (Attribute (Name self) error))
              (args
               (Call
                (func (Name str))
                (args (Name err))
                (keywords)
                (starargs #f)
                (kwargs #f)))
              (keywords)
              (starargs #f)
              (kwargs #f)))))
          (orelse)
          (finalbody)))))
      (orelse))
     (Return (Name new_arg_strings)))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name convert_arg_line_to_args)
    (args
     (Arguments
      (args self arg_line)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f)))
    (body (Return (List (Name arg_line))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _match_argument)
    (args
     (Arguments
      (args self action arg_strings_pattern)
      (arg-types #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f #f)))
    (body
     (Assign
      (targets (Name nargs_pattern))
      (value
       (Call
        (func (Attribute (Name self) _get_nargs_pattern))
        (args (Name action))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (Assign
      (targets (Name match))
      (value
       (Call
        (func (Attribute (Name _re) match))
        (args (Name nargs_pattern) (Name arg_strings_pattern))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (If
      (test
       (Compare
        (left (Name match))
        (ops Is)
        (comparators (NameConstant None))))
      (body
       (Assign
        (targets (Name nargs_errors))
        (value
         (Dict
          (keys (NameConstant None) (Name OPTIONAL) (Name ONE_OR_MORE))
          (values
           (Call
            (func (Name _))
            (args (Str "expected one argument"))
            (keywords)
            (starargs #f)
            (kwargs #f))
           (Call
            (func (Name _))
            (args (Str "expected at most one argument"))
            (keywords)
            (starargs #f)
            (kwargs #f))
           (Call
            (func (Name _))
            (args (Str "expected at least one argument"))
            (keywords)
            (starargs #f)
            (kwargs #f))))))
       (Assign
        (targets (Name default))
        (value
         (BinOp
          (Call
           (func (Name ngettext))
           (args
            (Str "expected %s argument")
            (Str "expected %s arguments")
            (Attribute (Name action) nargs))
           (keywords)
           (starargs #f)
           (kwargs #f))
          Mod
          (Attribute (Name action) nargs))))
       (Assign
        (targets (Name msg))
        (value
         (Call
          (func (Attribute (Name nargs_errors) get))
          (args (Attribute (Name action) nargs) (Name default))
          (keywords)
          (starargs #f)
          (kwargs #f))))
       (Raise
        (Call
         (func (Name ArgumentError))
         (args (Name action) (Name msg))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (orelse))
     (Return
      (Call
       (func (Name len))
       (args
        (Call
         (func (Attribute (Name match) group))
         (args (Num 1))
         (keywords)
         (starargs #f)
         (kwargs #f)))
       (keywords)
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _match_arguments_partial)
    (args
     (Arguments
      (args self actions arg_strings_pattern)
      (arg-types #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f #f)))
    (body
     (Assign (targets (Name result)) (value (List)))
     (For
      (target (Name i))
      (iter
       (Call
        (func (Name range))
        (args
         (Call
          (func (Name len))
          (args (Name actions))
          (keywords)
          (starargs #f)
          (kwargs #f))
         (Num 0)
         (UnaryOp USub (Num 1)))
        (keywords)
        (starargs #f)
        (kwargs #f)))
      (body
       (Assign
        (targets (Name actions_slice))
        (value (Subscript (Name actions) (Slice #f (Name i) #f))))
       (Assign
        (targets (Name pattern))
        (value
         (Call
          (func (Attribute (Str "") join))
          (args
           (ListComp
            (Call
             (func (Attribute (Name self) _get_nargs_pattern))
             (args (Name action))
             (keywords)
             (starargs #f)
             (kwargs #f))
            (for (Name action) in (Name actions_slice) if)))
          (keywords)
          (starargs #f)
          (kwargs #f))))
       (Assign
        (targets (Name match))
        (value
         (Call
          (func (Attribute (Name _re) match))
          (args (Name pattern) (Name arg_strings_pattern))
          (keywords)
          (starargs #f)
          (kwargs #f))))
       (If
        (test
         (Compare
          (left (Name match))
          (ops IsNot)
          (comparators (NameConstant None))))
        (body
         (Expr
          (Call
           (func (Attribute (Name result) extend))
           (args
            (ListComp
             (Call
              (func (Name len))
              (args (Name string))
              (keywords)
              (starargs #f)
              (kwargs #f))
             (for
              (Name string)
              in
              (Call
               (func (Attribute (Name match) groups))
               (args)
               (keywords)
               (starargs #f)
               (kwargs #f))
              if)))
           (keywords)
           (starargs #f)
           (kwargs #f)))
         (Break))
        (orelse)))
      (orelse))
     (Return (Name result)))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _parse_optional)
    (args
     (Arguments
      (args self arg_string)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f)))
    (body
     (If
      (test (UnaryOp Not (Name arg_string)))
      (body (Return (NameConstant None)))
      (orelse))
     (If
      (test
       (UnaryOp
        Not
        (Compare
         (left (Subscript (Name arg_string) (Index (Num 0))))
         (ops In)
         (comparators (Attribute (Name self) prefix_chars)))))
      (body (Return (NameConstant None)))
      (orelse))
     (If
      (test
       (Compare
        (left (Name arg_string))
        (ops In)
        (comparators (Attribute (Name self) _option_string_actions))))
      (body
       (Assign
        (targets (Name action))
        (value
         (Subscript
          (Attribute (Name self) _option_string_actions)
          (Index (Name arg_string)))))
       (Return (Tuple (Name action) (Name arg_string) (NameConstant None))))
      (orelse))
     (If
      (test
       (Compare
        (left
         (Call
          (func (Name len))
          (args (Name arg_string))
          (keywords)
          (starargs #f)
          (kwargs #f)))
        (ops Eq)
        (comparators (Num 1))))
      (body (Return (NameConstant None)))
      (orelse))
     (If
      (test
       (Compare (left (Str "=")) (ops In) (comparators (Name arg_string))))
      (body
       (Assign
        (targets (Tuple (Name option_string) (Name explicit_arg)))
        (value
         (Call
          (func (Attribute (Name arg_string) split))
          (args (Str "=") (Num 1))
          (keywords)
          (starargs #f)
          (kwargs #f))))
       (If
        (test
         (Compare
          (left (Name option_string))
          (ops In)
          (comparators (Attribute (Name self) _option_string_actions))))
        (body
         (Assign
          (targets (Name action))
          (value
           (Subscript
            (Attribute (Name self) _option_string_actions)
            (Index (Name option_string)))))
         (Return
          (Tuple (Name action) (Name option_string) (Name explicit_arg))))
        (orelse)))
      (orelse))
     (Assign
      (targets (Name option_tuples))
      (value
       (Call
        (func (Attribute (Name self) _get_option_tuples))
        (args (Name arg_string))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (If
      (test
       (Compare
        (left
         (Call
          (func (Name len))
          (args (Name option_tuples))
          (keywords)
          (starargs #f)
          (kwargs #f)))
        (ops Gt)
        (comparators (Num 1))))
      (body
       (Assign
        (targets (Name options))
        (value
         (Call
          (func (Attribute (Str ", ") join))
          (args
           (ListComp
            (Name option_string)
            (for
             (Tuple (Name action) (Name option_string) (Name explicit_arg))
             in
             (Name option_tuples)
             if)))
          (keywords)
          (starargs #f)
          (kwargs #f))))
       (Assign
        (targets (Name args))
        (value
         (Dict
          (keys (Str "option") (Str "matches"))
          (values (Name arg_string) (Name options)))))
       (Assign
        (targets (Name msg))
        (value
         (Call
          (func (Name _))
          (args (Str "ambiguous option: %(option)s could match %(matches)s"))
          (keywords)
          (starargs #f)
          (kwargs #f))))
       (Expr
        (Call
         (func (Attribute (Name self) error))
         (args (BinOp (Name msg) Mod (Name args)))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (orelse
       (If
        (test
         (Compare
          (left
           (Call
            (func (Name len))
            (args (Name option_tuples))
            (keywords)
            (starargs #f)
            (kwargs #f)))
          (ops Eq)
          (comparators (Num 1))))
        (body
         (Assign
          (targets (Tuple (Name option_tuple)))
          (value (Name option_tuples)))
         (Return (Name option_tuple)))
        (orelse))))
     (If
      (test
       (Call
        (func
         (Attribute (Attribute (Name self) _negative_number_matcher) match))
        (args (Name arg_string))
        (keywords)
        (starargs #f)
        (kwargs #f)))
      (body
       (If
        (test
         (UnaryOp Not (Attribute (Name self) _has_negative_number_optionals)))
        (body (Return (NameConstant None)))
        (orelse)))
      (orelse))
     (If
      (test
       (Compare (left (Str " ")) (ops In) (comparators (Name arg_string))))
      (body (Return (NameConstant None)))
      (orelse))
     (Return
      (Tuple (NameConstant None) (Name arg_string) (NameConstant None))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _get_option_tuples)
    (args
     (Arguments
      (args self option_string)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f)))
    (body
     (Assign (targets (Name result)) (value (List)))
     (Assign
      (targets (Name chars))
      (value (Attribute (Name self) prefix_chars)))
     (If
      (test
       (BoolOp
        And
        (Compare
         (left (Subscript (Name option_string) (Index (Num 0))))
         (ops In)
         (comparators (Name chars)))
        (Compare
         (left (Subscript (Name option_string) (Index (Num 1))))
         (ops In)
         (comparators (Name chars)))))
      (body
       (If
        (test
         (Compare
          (left (Str "="))
          (ops In)
          (comparators (Name option_string))))
        (body
         (Assign
          (targets (Tuple (Name option_prefix) (Name explicit_arg)))
          (value
           (Call
            (func (Attribute (Name option_string) split))
            (args (Str "=") (Num 1))
            (keywords)
            (starargs #f)
            (kwargs #f)))))
        (orelse
         (Assign (targets (Name option_prefix)) (value (Name option_string)))
         (Assign (targets (Name explicit_arg)) (value (NameConstant None)))))
       (For
        (target (Name option_string))
        (iter (Attribute (Name self) _option_string_actions))
        (body
         (If
          (test
           (Call
            (func (Attribute (Name option_string) startswith))
            (args (Name option_prefix))
            (keywords)
            (starargs #f)
            (kwargs #f)))
          (body
           (Assign
            (targets (Name action))
            (value
             (Subscript
              (Attribute (Name self) _option_string_actions)
              (Index (Name option_string)))))
           (Assign
            (targets (Name tup))
            (value
             (Tuple (Name action) (Name option_string) (Name explicit_arg))))
           (Expr
            (Call
             (func (Attribute (Name result) append))
             (args (Name tup))
             (keywords)
             (starargs #f)
             (kwargs #f))))
          (orelse)))
        (orelse)))
      (orelse
       (If
        (test
         (BoolOp
          And
          (Compare
           (left (Subscript (Name option_string) (Index (Num 0))))
           (ops In)
           (comparators (Name chars)))
          (Compare
           (left (Subscript (Name option_string) (Index (Num 1))))
           (ops NotIn)
           (comparators (Name chars)))))
        (body
         (Assign (targets (Name option_prefix)) (value (Name option_string)))
         (Assign (targets (Name explicit_arg)) (value (NameConstant None)))
         (Assign
          (targets (Name short_option_prefix))
          (value (Subscript (Name option_string) (Slice #f (Num 2) #f))))
         (Assign
          (targets (Name short_explicit_arg))
          (value (Subscript (Name option_string) (Slice (Num 2) #f #f))))
         (For
          (target (Name option_string))
          (iter (Attribute (Name self) _option_string_actions))
          (body
           (If
            (test
             (Compare
              (left (Name option_string))
              (ops Eq)
              (comparators (Name short_option_prefix))))
            (body
             (Assign
              (targets (Name action))
              (value
               (Subscript
                (Attribute (Name self) _option_string_actions)
                (Index (Name option_string)))))
             (Assign
              (targets (Name tup))
              (value
               (Tuple
                (Name action)
                (Name option_string)
                (Name short_explicit_arg))))
             (Expr
              (Call
               (func (Attribute (Name result) append))
               (args (Name tup))
               (keywords)
               (starargs #f)
               (kwargs #f))))
            (orelse
             (If
              (test
               (Call
                (func (Attribute (Name option_string) startswith))
                (args (Name option_prefix))
                (keywords)
                (starargs #f)
                (kwargs #f)))
              (body
               (Assign
                (targets (Name action))
                (value
                 (Subscript
                  (Attribute (Name self) _option_string_actions)
                  (Index (Name option_string)))))
               (Assign
                (targets (Name tup))
                (value
                 (Tuple
                  (Name action)
                  (Name option_string)
                  (Name explicit_arg))))
               (Expr
                (Call
                 (func (Attribute (Name result) append))
                 (args (Name tup))
                 (keywords)
                 (starargs #f)
                 (kwargs #f))))
              (orelse)))))
          (orelse)))
        (orelse
         (Expr
          (Call
           (func (Attribute (Name self) error))
           (args
            (BinOp
             (Call
              (func (Name _))
              (args (Str "unexpected option string: %s"))
              (keywords)
              (starargs #f)
              (kwargs #f))
             Mod
             (Name option_string)))
           (keywords)
           (starargs #f)
           (kwargs #f)))))))
     (Return (Name result)))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _get_nargs_pattern)
    (args
     (Arguments
      (args self action)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f)))
    (body
     (Assign (targets (Name nargs)) (value (Attribute (Name action) nargs)))
     (If
      (test
       (Compare
        (left (Name nargs))
        (ops Is)
        (comparators (NameConstant None))))
      (body (Assign (targets (Name nargs_pattern)) (value (Str "(-*A-*)"))))
      (orelse
       (If
        (test
         (Compare (left (Name nargs)) (ops Eq) (comparators (Name OPTIONAL))))
        (body (Assign (targets (Name nargs_pattern)) (value (Str "(-*A?-*)"))))
        (orelse
         (If
          (test
           (Compare
            (left (Name nargs))
            (ops Eq)
            (comparators (Name ZERO_OR_MORE))))
          (body
           (Assign (targets (Name nargs_pattern)) (value (Str "(-*[A-]*)"))))
          (orelse
           (If
            (test
             (Compare
              (left (Name nargs))
              (ops Eq)
              (comparators (Name ONE_OR_MORE))))
            (body
             (Assign
              (targets (Name nargs_pattern))
              (value (Str "(-*A[A-]*)"))))
            (orelse
             (If
              (test
               (Compare
                (left (Name nargs))
                (ops Eq)
                (comparators (Name REMAINDER))))
              (body
               (Assign
                (targets (Name nargs_pattern))
                (value (Str "([-AO]*)"))))
              (orelse
               (If
                (test
                 (Compare
                  (left (Name nargs))
                  (ops Eq)
                  (comparators (Name PARSER))))
                (body
                 (Assign
                  (targets (Name nargs_pattern))
                  (value (Str "(-*A[-AO]*)"))))
                (orelse
                 (Assign
                  (targets (Name nargs_pattern))
                  (value
                   (BinOp
                    (Str "(-*%s-*)")
                    Mod
                    (Call
                     (func (Attribute (Str "-*") join))
                     (args (BinOp (Str "A") Mult (Name nargs)))
                     (keywords)
                     (starargs #f)
                     (kwargs #f)))))))))))))))))
     (If
      (test (Attribute (Name action) option_strings))
      (body
       (Assign
        (targets (Name nargs_pattern))
        (value
         (Call
          (func (Attribute (Name nargs_pattern) replace))
          (args (Str "-*") (Str ""))
          (keywords)
          (starargs #f)
          (kwargs #f))))
       (Assign
        (targets (Name nargs_pattern))
        (value
         (Call
          (func (Attribute (Name nargs_pattern) replace))
          (args (Str "-") (Str ""))
          (keywords)
          (starargs #f)
          (kwargs #f)))))
      (orelse))
     (Return (Name nargs_pattern)))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _get_values)
    (args
     (Arguments
      (args self action arg_strings)
      (arg-types #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f #f)))
    (body
     (If
      (test
       (Compare
        (left (Attribute (Name action) nargs))
        (ops NotIn)
        (comparators (List (Name PARSER) (Name REMAINDER)))))
      (body
       (Try
        (body
         (Expr
          (Call
           (func (Attribute (Name arg_strings) remove))
           (args (Str "--"))
           (keywords)
           (starargs #f)
           (kwargs #f))))
        (handlers (except (Name ValueError) #f (Pass)))
        (orelse)
        (finalbody)))
      (orelse))
     (If
      (test
       (BoolOp
        And
        (UnaryOp Not (Name arg_strings))
        (Compare
         (left (Attribute (Name action) nargs))
         (ops Eq)
         (comparators (Name OPTIONAL)))))
      (body
       (If
        (test (Attribute (Name action) option_strings))
        (body
         (Assign
          (targets (Name value))
          (value (Attribute (Name action) const))))
        (orelse
         (Assign
          (targets (Name value))
          (value (Attribute (Name action) default)))))
       (If
        (test
         (Call
          (func (Name isinstance))
          (args (Name value) (Name str))
          (keywords)
          (starargs #f)
          (kwargs #f)))
        (body
         (Assign
          (targets (Name value))
          (value
           (Call
            (func (Attribute (Name self) _get_value))
            (args (Name action) (Name value))
            (keywords)
            (starargs #f)
            (kwargs #f))))
         (Expr
          (Call
           (func (Attribute (Name self) _check_value))
           (args (Name action) (Name value))
           (keywords)
           (starargs #f)
           (kwargs #f))))
        (orelse)))
      (orelse
       (If
        (test
         (BoolOp
          And
          (UnaryOp Not (Name arg_strings))
          (Compare
           (left (Attribute (Name action) nargs))
           (ops Eq)
           (comparators (Name ZERO_OR_MORE)))
          (UnaryOp Not (Attribute (Name action) option_strings))))
        (body
         (If
          (test
           (Compare
            (left (Attribute (Name action) default))
            (ops IsNot)
            (comparators (NameConstant None))))
          (body
           (Assign
            (targets (Name value))
            (value (Attribute (Name action) default))))
          (orelse (Assign (targets (Name value)) (value (Name arg_strings)))))
         (Expr
          (Call
           (func (Attribute (Name self) _check_value))
           (args (Name action) (Name value))
           (keywords)
           (starargs #f)
           (kwargs #f))))
        (orelse
         (If
          (test
           (BoolOp
            And
            (Compare
             (left
              (Call
               (func (Name len))
               (args (Name arg_strings))
               (keywords)
               (starargs #f)
               (kwargs #f)))
             (ops Eq)
             (comparators (Num 1)))
            (Compare
             (left (Attribute (Name action) nargs))
             (ops In)
             (comparators (List (NameConstant None) (Name OPTIONAL))))))
          (body
           (Assign
            (targets (Tuple (Name arg_string)))
            (value (Name arg_strings)))
           (Assign
            (targets (Name value))
            (value
             (Call
              (func (Attribute (Name self) _get_value))
              (args (Name action) (Name arg_string))
              (keywords)
              (starargs #f)
              (kwargs #f))))
           (Expr
            (Call
             (func (Attribute (Name self) _check_value))
             (args (Name action) (Name value))
             (keywords)
             (starargs #f)
             (kwargs #f))))
          (orelse
           (If
            (test
             (Compare
              (left (Attribute (Name action) nargs))
              (ops Eq)
              (comparators (Name REMAINDER))))
            (body
             (Assign
              (targets (Name value))
              (value
               (ListComp
                (Call
                 (func (Attribute (Name self) _get_value))
                 (args (Name action) (Name v))
                 (keywords)
                 (starargs #f)
                 (kwargs #f))
                (for (Name v) in (Name arg_strings) if)))))
            (orelse
             (If
              (test
               (Compare
                (left (Attribute (Name action) nargs))
                (ops Eq)
                (comparators (Name PARSER))))
              (body
               (Assign
                (targets (Name value))
                (value
                 (ListComp
                  (Call
                   (func (Attribute (Name self) _get_value))
                   (args (Name action) (Name v))
                   (keywords)
                   (starargs #f)
                   (kwargs #f))
                  (for (Name v) in (Name arg_strings) if))))
               (Expr
                (Call
                 (func (Attribute (Name self) _check_value))
                 (args (Name action) (Subscript (Name value) (Index (Num 0))))
                 (keywords)
                 (starargs #f)
                 (kwargs #f))))
              (orelse
               (Assign
                (targets (Name value))
                (value
                 (ListComp
                  (Call
                   (func (Attribute (Name self) _get_value))
                   (args (Name action) (Name v))
                   (keywords)
                   (starargs #f)
                   (kwargs #f))
                  (for (Name v) in (Name arg_strings) if))))
               (For
                (target (Name v))
                (iter (Name value))
                (body
                 (Expr
                  (Call
                   (func (Attribute (Name self) _check_value))
                   (args (Name action) (Name v))
                   (keywords)
                   (starargs #f)
                   (kwargs #f))))
                (orelse))))))))))))
     (Return (Name value)))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _get_value)
    (args
     (Arguments
      (args self action arg_string)
      (arg-types #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f #f)))
    (body
     (Assign
      (targets (Name type_func))
      (value
       (Call
        (func (Attribute (Name self) _registry_get))
        (args
         (Str "type")
         (Attribute (Name action) type)
         (Attribute (Name action) type))
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (If
      (test
       (UnaryOp
        Not
        (Call
         (func (Name callable))
         (args (Name type_func))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (body
       (Assign
        (targets (Name msg))
        (value
         (Call
          (func (Name _))
          (args (Str "%r is not callable"))
          (keywords)
          (starargs #f)
          (kwargs #f))))
       (Raise
        (Call
         (func (Name ArgumentError))
         (args (Name action) (BinOp (Name msg) Mod (Name type_func)))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (orelse))
     (Try
      (body
       (Assign
        (targets (Name result))
        (value
         (Call
          (func (Name type_func))
          (args (Name arg_string))
          (keywords)
          (starargs #f)
          (kwargs #f)))))
      (handlers
       (except
        (Name ArgumentTypeError)
        #f
        (Assign
         (targets (Name name))
         (value
          (Call
           (func (Name getattr))
           (args
            (Attribute (Name action) type)
            (Str "__name__")
            (Call
             (func (Name repr))
             (args (Attribute (Name action) type))
             (keywords)
             (starargs #f)
             (kwargs #f)))
           (keywords)
           (starargs #f)
           (kwargs #f))))
        (Assign
         (targets (Name msg))
         (value
          (Call
           (func (Name str))
           (args
            (Subscript
             (Call
              (func (Attribute (Name _sys) exc_info))
              (args)
              (keywords)
              (starargs #f)
              (kwargs #f))
             (Index (Num 1))))
           (keywords)
           (starargs #f)
           (kwargs #f))))
        (Raise
         (Call
          (func (Name ArgumentError))
          (args (Name action) (Name msg))
          (keywords)
          (starargs #f)
          (kwargs #f))))
       (except
        (Tuple (Name TypeError) (Name ValueError))
        #f
        (Assign
         (targets (Name name))
         (value
          (Call
           (func (Name getattr))
           (args
            (Attribute (Name action) type)
            (Str "__name__")
            (Call
             (func (Name repr))
             (args (Attribute (Name action) type))
             (keywords)
             (starargs #f)
             (kwargs #f)))
           (keywords)
           (starargs #f)
           (kwargs #f))))
        (Assign
         (targets (Name args))
         (value
          (Dict
           (keys (Str "type") (Str "value"))
           (values (Name name) (Name arg_string)))))
        (Assign
         (targets (Name msg))
         (value
          (Call
           (func (Name _))
           (args (Str "invalid %(type)s value: %(value)r"))
           (keywords)
           (starargs #f)
           (kwargs #f))))
        (Raise
         (Call
          (func (Name ArgumentError))
          (args (Name action) (BinOp (Name msg) Mod (Name args)))
          (keywords)
          (starargs #f)
          (kwargs #f)))))
      (orelse)
      (finalbody))
     (Return (Name result)))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _check_value)
    (args
     (Arguments
      (args self action value)
      (arg-types #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f #f)))
    (body
     (If
      (test
       (BoolOp
        And
        (Compare
         (left (Attribute (Name action) choices))
         (ops IsNot)
         (comparators (NameConstant None)))
        (Compare
         (left (Name value))
         (ops NotIn)
         (comparators (Attribute (Name action) choices)))))
      (body
       (Assign
        (targets (Name args))
        (value
         (Dict
          (keys (Str "value") (Str "choices"))
          (values
           (Name value)
           (Call
            (func (Attribute (Str ", ") join))
            (args
             (Call
              (func (Name map))
              (args (Name repr) (Attribute (Name action) choices))
              (keywords)
              (starargs #f)
              (kwargs #f)))
            (keywords)
            (starargs #f)
            (kwargs #f))))))
       (Assign
        (targets (Name msg))
        (value
         (Call
          (func (Name _))
          (args (Str "invalid choice: %(value)r (choose from %(choices)s)"))
          (keywords)
          (starargs #f)
          (kwargs #f))))
       (Raise
        (Call
         (func (Name ArgumentError))
         (args (Name action) (BinOp (Name msg) Mod (Name args)))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (orelse)))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name format_usage)
    (args
     (Arguments
      (args self)
      (arg-types #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f)))
    (body
     (Assign
      (targets (Name formatter))
      (value
       (Call
        (func (Attribute (Name self) _get_formatter))
        (args)
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (Expr
      (Call
       (func (Attribute (Name formatter) add_usage))
       (args
        (Attribute (Name self) usage)
        (Attribute (Name self) _actions)
        (Attribute (Name self) _mutually_exclusive_groups))
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Return
      (Call
       (func (Attribute (Name formatter) format_help))
       (args)
       (keywords)
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name format_help)
    (args
     (Arguments
      (args self)
      (arg-types #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f)))
    (body
     (Assign
      (targets (Name formatter))
      (value
       (Call
        (func (Attribute (Name self) _get_formatter))
        (args)
        (keywords)
        (starargs #f)
        (kwargs #f))))
     (Expr
      (Call
       (func (Attribute (Name formatter) add_usage))
       (args
        (Attribute (Name self) usage)
        (Attribute (Name self) _actions)
        (Attribute (Name self) _mutually_exclusive_groups))
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Expr
      (Call
       (func (Attribute (Name formatter) add_text))
       (args (Attribute (Name self) description))
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (For
      (target (Name action_group))
      (iter (Attribute (Name self) _action_groups))
      (body
       (Expr
        (Call
         (func (Attribute (Name formatter) start_section))
         (args (Attribute (Name action_group) title))
         (keywords)
         (starargs #f)
         (kwargs #f)))
       (Expr
        (Call
         (func (Attribute (Name formatter) add_text))
         (args (Attribute (Name action_group) description))
         (keywords)
         (starargs #f)
         (kwargs #f)))
       (Expr
        (Call
         (func (Attribute (Name formatter) add_arguments))
         (args (Attribute (Name action_group) _group_actions))
         (keywords)
         (starargs #f)
         (kwargs #f)))
       (Expr
        (Call
         (func (Attribute (Name formatter) end_section))
         (args)
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (orelse))
     (Expr
      (Call
       (func (Attribute (Name formatter) add_text))
       (args (Attribute (Name self) epilog))
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Return
      (Call
       (func (Attribute (Name formatter) format_help))
       (args)
       (keywords)
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _get_formatter)
    (args
     (Arguments
      (args self)
      (arg-types #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f)))
    (body
     (Return
      (Call
       (func (Attribute (Name self) formatter_class))
       (args)
       (keywords (prog (Attribute (Name self) prog)))
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name print_usage)
    (args
     (Arguments
      (args self file)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f (NameConstant None))))
    (body
     (If
      (test
       (Compare (left (Name file)) (ops Is) (comparators (NameConstant None))))
      (body
       (Assign (targets (Name file)) (value (Attribute (Name _sys) stdout))))
      (orelse))
     (Expr
      (Call
       (func (Attribute (Name self) _print_message))
       (args
        (Call
         (func (Attribute (Name self) format_usage))
         (args)
         (keywords)
         (starargs #f)
         (kwargs #f))
        (Name file))
       (keywords)
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name print_help)
    (args
     (Arguments
      (args self file)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f (NameConstant None))))
    (body
     (If
      (test
       (Compare (left (Name file)) (ops Is) (comparators (NameConstant None))))
      (body
       (Assign (targets (Name file)) (value (Attribute (Name _sys) stdout))))
      (orelse))
     (Expr
      (Call
       (func (Attribute (Name self) _print_message))
       (args
        (Call
         (func (Attribute (Name self) format_help))
         (args)
         (keywords)
         (starargs #f)
         (kwargs #f))
        (Name file))
       (keywords)
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name _print_message)
    (args
     (Arguments
      (args self message file)
      (arg-types #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f (NameConstant None))))
    (body
     (If
      (test (Name message))
      (body
       (If
        (test
         (Compare
          (left (Name file))
          (ops Is)
          (comparators (NameConstant None))))
        (body
         (Assign (targets (Name file)) (value (Attribute (Name _sys) stderr))))
        (orelse))
       (Expr
        (Call
         (func (Attribute (Name file) write))
         (args (Name message))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (orelse)))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name exit)
    (args
     (Arguments
      (args self status message)
      (arg-types #f #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f (Num 0) (NameConstant None))))
    (body
     (If
      (test (Name message))
      (body
       (Expr
        (Call
         (func (Attribute (Name self) _print_message))
         (args (Name message) (Attribute (Name _sys) stderr))
         (keywords)
         (starargs #f)
         (kwargs #f))))
      (orelse))
     (Expr
      (Call
       (func (Attribute (Name _sys) exit))
       (args (Name status))
       (keywords)
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f))
   (FunctionDef
    (name error)
    (args
     (Arguments
      (args self message)
      (arg-types #f #f)
      (vararg #f)
      (kwonlyargs)
      (kwonlyarg-types)
      (kw_defaults)
      (kwarg #f)
      (defaults #f #f)))
    (body
     (Expr
      (Str
       "error(message: string)\n\n        Prints a usage message incorporating the message to stderr and\n        exits.\n\n        If you override this in a subclass, it should not return -- it\n        should either exit or raise an exception.\n        "))
     (Expr
      (Call
       (func (Attribute (Name self) print_usage))
       (args (Attribute (Name _sys) stderr))
       (keywords)
       (starargs #f)
       (kwargs #f)))
     (Assign
      (targets (Name args))
      (value
       (Dict
        (keys (Str "prog") (Str "message"))
        (values (Attribute (Name self) prog) (Name message)))))
     (Expr
      (Call
       (func (Attribute (Name self) exit))
       (args
        (Num 2)
        (BinOp
         (Call
          (func (Name _))
          (args (Str "%(prog)s: error: %(message)s\n"))
          (keywords)
          (starargs #f)
          (kwargs #f))
         Mod
         (Name args)))
       (keywords)
       (starargs #f)
       (kwargs #f))))
    (decorator_list)
    (returns #f)))
  (decorator_list)))
