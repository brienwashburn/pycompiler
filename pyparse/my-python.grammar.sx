((single_input (or 'NEWLINE simple_stmt (seq compound_stmt 'NEWLINE)))
 (file_input (or ($*--> (rep (or 'NEWLINE stmt))
                        'ENDMARKER
                        `(Module ,@(unpack ($ 1))))
                 ($*--> 'ENDMARKER
                        `(Module))))
 (eval_input ($*--> testlist 
                    (rep 'NEWLINE) 
                    'ENDMARKER))

 (decorator ($*--> "@" 
                   dotted_name     
                   (opt ($*--> "(" (opt arglist) ")" (if ($ 2) 
                                                         ($ 2) 
                                                         `((bases) (keywords) (starargs #f) (kwargs #f)))))
                   'NEWLINE
                   (if ($ 3)
                       `(Call (func ,(process-dotted '() (reverse ($ 2)))) ,@($ 3))
                       (process-dotted '() (reverse ($ 2))))))

 (decorators ($*--> (rep+ decorator) `(decorator_list ,@($ 1))))

 (decorated (or ($*--> decorators 
                       classdef
                       (replace ($ 2) (- (length ($ 2)) 2) ($ 1)))
                ($*--> decorators 
                       funcdef
                       (replace ($ 2) (- (length ($ 2)) 3) ($ 1)))))

 (funcdef ($*--> "def" 
                 'NAME 
                 parameters 
                 (opt ($*--> "->" test ($ 2)))
                 ":" 
                 suite
                 (if ($ 4)
                     `(FunctionDef (name ,(string->symbol ($ 2))) (args ,($ 3)) (body ,@($ 6)) (decorator_list) (returns ,($ 4)))
                     `(FunctionDef (name ,(string->symbol ($ 2))) (args ,($ 3)) (body ,@($ 6)) (decorator_list) (returns #f)))))

 (parameters ($*--> "(" (opt typedargslist) ")" (if ($ 2) 
                                                    ($ 2) 
                                                    `(Arguments 
                                                      (args) 
                                                      (arg-types) 
                                                      (vararg #f) 
                                                      (kwonlyargs) 
                                                      (kwonlyarg-types)
                                                      (kw_defaults)
                                                      (kwarg #f)
                                                      (defaults)))))
                                                    

 (typedargslist
  ($--> (or ($*--> ($*--> ($*--> tfpdef
		                 (opt ($--> (seq "=" test) ($ 2)))
                                 (if ($ 2)
                                     `( ,(car ($ 1)) ,($ 2) ,(cadr ($ 1)))
                                     `( ,(car ($ 1)) #f ,(cadr ($ 1)))))
		          ($--> (rep tkwonly) $$)
                          (if ($ 2)
                              (recombine-arglist `(,($ 1) ,@($ 2)))
                              (recombine-arglist `(,($ 1)))))
		   (opt ($--> (seq ","
				      (opt (or targ-kwonly-kwarg
		     		               tkwarg))) 
                                 (if ($ 2)
                                  ($ 2)
                                  `(() () (#f) () () () (#f) ()))))
                   (if ($ 2)
                       `( (,@(car ($ 1))) 
                          (,@(caddr ($ 1))) 
                          ,(list-ref ($ 2) 2) 
                          ,(list-ref ($ 2) 3) 
                          ,(list-ref ($ 2) 4) 
                          ,(list-ref ($ 2) 5) 
                          ,(list-ref ($ 2) 6) 
                          (,@(cadr ($ 1))))
                       `( (,@(car ($ 1))) 
                          (,@(caddr ($ 1))) 
                          (#f) 
                          () 
                          ()
                          () 
                          (#f)  
                          (,@(cadr ($ 1))))))
	    targ-kwonly-kwarg
	    tkwarg)
        `(Arguments 
          ,`(args             ,@($ 0)) 
          ,`(arg-types       ,@($ 1)) 
          ,`(vararg           ,@($ 2)) 
          ,`(kwonlyargs       ,@($ 3)) 
          ,`(kwonlyarg-types  ,@($ 4)) 
          ,`(kw_defaults      ,@($ 5))  
          ,`(kwarg            ,@($ 6)) 
          ,`(defaults         ,@($ 7)))))

 (targ-kwonly-kwarg 
      ($*--> "*" 
             ($*--> (opt tfpdef) (if ($ 1) (if (equal? (cadr ($ 1)) #f) `(,(car ($ 1))) ($ 1))  '(#f)))
             ($--> (rep tkwonly) (recombine-arglist $$))
             (opt ($--> (seq "," "**" ($*--> tfpdef (if (equal? (cadr ($ 1)) #f) `(,(car ($ 1))) ($ 1)))) ($ 3)))
	     (if ($ 4)
	      `( ()  
                 ()
                 (,@($ 2))
                 (,@(car ($ 3)))  
                 (,@(caddr ($ 3))) 
                 (,@(cadr ($ 3))) 
                 ,($ 4)
                 ())
	      `( ()  
                 ()
                 (,@($ 2))
                 (,@(car ($ 3)))  
                 (,@(caddr ($ 3))) 
                 (,@(cadr ($ 3))) 
                 (#f) 
                 ()))))

 (tkwonly ($*--> "," 
                 tfpdef 
                 (opt ($--> (seq "=" test) ($ 2) ))
                 (if ($ 3)
                     `( ,(car ($ 2)) ,($ 3) ,(cadr ($ 2)))
                     `( ,(car ($ 2)) #f ,(cadr ($ 2))))))

 (tkwarg ($*--> "**" tfpdef `( () () (#f) () () () (,(car ($ 2))) ())))


 (tfpdef ($--> (seq 'NAME        
                    (opt ($--> (seq ":" test) ($ 2))))
                    (if ($ 2)
                     `(,(string->symbol ($ 1)) ,($ 2))
                     `(,(string->symbol ($ 1)) #f))))


 (varargslist
  ($--> (or ($*--> ($*--> ($*--> vfpdef
		                 (opt ($--> (seq "=" test) ($ 2)))
                                 (if ($ 2)
                                     `( ,($ 1) ,($ 2) #f)
                                     `( ,($ 1) #f #f)))
		          ($--> (rep kwonly) $$)
                          (if ($ 2)
                              (recombine-arglist `(,($ 1) ,@($ 2)))
                              (recombine-arglist `(($ 1)))))
	           (opt ($*--> ","
			       (opt (or arg-kwonly-kwarg
		     		        kwarg)) 
                               (if ($ 2)
                                   ($ 2)
                                   `(() (#f) (#f) () () () (#f) ()))))
                   (if ($ 2)
                       `( (,@(car ($ 1))) 
                          ,(flatten (make-list (length (car ($ 1))) #f))
                          ,(list-ref ($ 2) 2) 
                          ,(list-ref ($ 2) 3) 
                          ,(list-ref ($ 2) 4) 
                          ,(list-ref ($ 2) 5) 
                          ,(list-ref ($ 2) 6) 
                          (,@(cadr ($ 1))))
                       `( (,@(car ($ 1))) 
                          ,(flatten (make-list (length (car ($ 1))) #f))
                          (#f) 
                          () 
                          () 
                          ()
                          (#f) 
                          (,@(cadr ($ 1))))))
	    arg-kwonly-kwarg
	    kwarg)
        `(Arguments 
          ,`(args             ,@($ 0)) 
          ,`(arg-types       ,@($ 1)) 
          ,`(vararg          ,@($ 2)) 
          ,`(kwonlyargs       ,@($ 3)) 
          ,`(kwonlyarg-types  ,@($ 4)) 
          ,`(kw_defaults      ,@($ 5))  
          ,`(kwarg            ,@($ 6)) 
          ,`(defaults         ,@($ 7)))))

 (arg-kwonly-kwarg 
      ($*--> "*" 
             (opt vfpdef)
             ($--> (rep kwonly) (recombine-arglist $$))
             (opt ($--> (seq "," "**" vfpdef) ($ 3)))
	     (if ($ 4)
	      `( ()  ()  (,(if ($ 2) ($ 2) #f))   (,@(car ($ 3)))  (,@(caddr ($ 3)))  (,@(cadr ($ 3)))  (,($ 4))  ())
	      `( ()  ()  (,(if ($ 2) ($ 2) #f))   (,@(car ($ 3)))  (,@(caddr ($ 3)))  (,@(cadr ($ 3)))  (#f)        ()))))

 (kwonly ($*--> "," 
                vfpdef 
                (opt ($--> (seq "=" test) ($ 2) ))
                (if ($ 3)
                    `( ,($ 2) ,($ 3) #f)
                    `( ,($ 2) #f #f))))

 (kwarg ($*--> "**" vfpdef `( () () (#f) () () () (,($ 2)) ())))

 (vfpdef ($--> (seq 'NAME) (string->symbol ($ 1))))

 (stmt (or simple_stmt compound_stmt))

 (simple_stmt ($*--> (rep+/sep ";" small_stmt  #t) 'NEWLINE ($ 1)))

 (small_stmt (or expr_stmt
                 del_stmt
                 pass_stmt
                 flow_stmt
                 import_stmt
                 global_stmt
                 nonlocal_stmt
                 assert_stmt))


 (expr_stmt (or ($*--> testlist_star_expr 
                       augassign 
                       (or yield_expr testlist) 
                             `(AugAssign ,($ 1) ,($ 2) ,($ 3)))
                ($*--> testlist_star_expr 
                       (rep+ ($*--> "=" 
                                   (or yield_expr 
                                       testlist_star_expr) 
                                   ($ 2)))
                        `(Assign (targets ,@(car (reorder ($ 1) ($ 2)))) (value  ,(cadr (reorder ($ 1) ($ 2))))))
                ($*--> testlist_star_expr 
                       `(Expr ,($ 1)))))

 (testlist_star_expr ($*--> (rep+/sep "," (or test star_expr) #f) 
                            (opt ",")
			    (cond
			    [($ 2) `(Tuple ,@($ 1))]
			    [(equal? 1 (length ($ 1))) (car ($ 1))]
			    [else `(Tuple ,@($ 1))])))

 (augassign  (or ($--> "+=" 'Add)
                 ($--> "-=" 'Sub)
                 ($--> "*=" 'Mult)
                 ($--> "/=" 'Div)
                 ($--> "%=" 'Mod)
                 ($--> "&=" 'BitAnd)
                 ($--> "|=" 'BitOr)
                 ($--> "^=" 'BitXor)
                 ($--> "<<=" 'LShift)
                 ($--> ">>=" 'RShift)
                 ($--> "**=" 'Pow)
                 ($--> "//=" 'FloorDiv)))

 (del_stmt ($*--> "del" exprlist `(Delete ,@($ 2))))

 (pass_stmt ($--> "pass" '(Pass)))
 
 (flow_stmt (or break_stmt continue_stmt return_stmt raise_stmt yield_stmt))

 (break_stmt ($*--> "break" '(Break)))

 (continue_stmt ($*--> "continue" '(Continue)))

 (return_stmt ($*--> "return" 
                     (opt testlist)
                     (if ($ 2)
                       `(Return ,($ 2))
                        '(Return))))

 (yield_stmt ($*--> yield_expr `(Expr ,($ 1))))

 (raise_stmt ($*--> "raise" 
                    (opt ($*--> test 
                                (opt ($*--> "from" 
                                            test 
                                            ($ 2))) 
                                (if ($ 2) 
                                 `(,($ 1) ,($ 2)) 
                                 `(,($ 1)))))
                    (if ($ 2)
                     `(Raise ,@($ 2))
                     `(Raise ))))
                     
                     

 (import_stmt (or import_name import_from))
 (import_name ($*--> "import" 
                     dotted_as_names 
                     `(Import ,@(car ($ 2)))))

 (import_from ($*--> "from"
                     (or ($*--> (rep (or "." "..."))
                                dotted_name 
                                (if ($ 1)
		                    `(,(make-dotted ($ 2)) ,(apply + (map string-length (flatten ($ 1)))))
                                    `(,(make-dotted ($ 2)) 0)))
                         ($*--> (rep+ (or "." "...")) `(#f ,(apply + (map string-length (flatten ($ 1)))))))
                     "import"
                     (or ($*--> "*" `(((* #f))))
                         ($*-->  "(" import_as_names ")" ($ 2))
                         ($*--> import_as_names ($ 1)))
                     `(ImportFrom (module ,(car ($ 2))) (names ,@(car ($ 4))) (level ,(cadr ($ 2))))))

 (import_as_name ($*--> 'NAME 
                        (opt ($*--> "as" 'NAME (string->symbol ($ 2))))
                        (if ($ 2)
                            `(,(string->symbol ($ 1)) ,($ 2))
                            `(,(string->symbol ($ 1)) #f))))

 (dotted_as_name ($*--> dotted_name 
                        (opt ($*--> "as" 'NAME (string->symbol ($ 2))))
                        (if ($ 2)
                            `(,(make-dotted ($ 1)) ,($ 2))
                            `(,(make-dotted ($ 1)) #f))))

 (import_as_names ($*--> (rep+/sep "," import_as_name #t) $$))

 (dotted_as_names ($*--> (rep+/sep "," dotted_as_name #f) $$))

 (dotted_name ($--> (rep+/sep "." 'NAME #f) $$))

 (global_stmt ($*--> "global" 
                     (rep+/sep "," 'NAME #f)
                     `(Global ,@(map string->symbol ($ 2)))))

 (nonlocal_stmt ($*--> "nonlocal" 
                       (rep+/sep "," 'NAME #f)
                       `(Nonlocal ,@(map string->symbol ($ 2)))))

 (assert_stmt ($*--> "assert"  
                     (rep+/sep "," test #f)
                     `(Assert ,@($ 2))))

 (compound_stmt ($*--> (or if_stmt
                           while_stmt
                           for_stmt
                           try_stmt
                           with_stmt
                           funcdef
                           classdef
                           decorated) `(,($ 1))))

 (if_stmt ($--> (or ($*--> "if"
                           test
                           ":"
                           suite
                           (rep ($*--> "elif" test ":" suite `(,($ 2) ,($ 4))))
                           (if ($ 5)
                               `(,($ 2) ,@($ 4) ,@(process-if '() ($ 5)))
                               `(,($ 2) ,@($ 4) )))
                    ($*--> "if"
                           test
                           ":"
                           suite
                           (rep+ ($*--> "elif" test ":" suite `(,($ 2) ,($ 4))))
                           (opt ($*--> "else" ":" suite ($ 3)))
                           (if ($ 6)
                               `(,($ 2) ,@($ 4) ,@(process-if ($ 6) (reverse ($ 5))))
                               `(,($ 2) ,@($ 4) ,@(process-if '() (reverse ($ 5))))))
                    ($*--> "if"
                           test
                           ":"
                           suite
                           (opt ($*--> "else" ":" suite ($ 3)))
                           (if ($ 5)
                               `(,($ 2) ,@($ 4) ,($ 5))
                               `(,($ 2) ,@($ 4) ()))))
                `(If (test ,(car $$))
                     (body ,(cadr $$))
                     (orelse ,@(caddr $$)))))

 (while_stmt ($*--> "while" 
                    test 
                    ":" 
                    suite 
                    (opt ($*--> "else" ":" suite ($ 3)))
                    (if ($ 5)
                        `(While (test ,($ 2))
                                (body ,@($ 4))
                                (orelse ,@($ 5)))
                        `(While (test ,($ 2))
                                (body ,@($ 4))
                                (orelse)))))

 (for_stmt ($*--> "for" 
                  ($*--> exprlist (if (equal? (length ($ 1)) 1) ($ 1) `((Tuple ,@($ 1)))))
                  "in" 
                  testlist
                  ":" 
                  suite 
                  (opt ($*--> "else" ":" suite ($ 3)))
                  (if ($ 7)
                      `(For (target ,@($ 2))
                            (iter ,($ 4))
                            (body ,@($ 6))
                            (orelse ,@($ 7)))
                      `(For (target ,@($ 2))
                            (iter ,($ 4))
                            (body ,@($ 6))
                            (orelse)))))

 (try_stmt ($*--> "try" 
                  ":"
                  suite
                  (or ($*--> (rep+ ($*--> except_clause ":" suite `(except ,@($ 1) ,@($ 3))))
                             ($*--> "else" ":" suite ($ 3))
                             (opt ($*--> "finally" ":" suite ($ 3)))
                             (if ($ 3)
                                 `(,($ 1) ,($ 2) ,($ 3))
                                 `(,($ 1) ,($ 2) ())))
                      ($*--> (rep+ ($*--> except_clause ":" suite `(except ,@($ 1) ,@($ 3))))
                             (opt ($*--> "else" ":" suite ($ 3)))
                             (if ($ 2)
                                 `(,($ 1) ,($ 2) ())
                                 `(,($ 1) ()     ())))
                      ($*--> (rep+ ($*--> except_clause ":" suite `(except ,@($ 1) ,@($ 3))))
                             (opt ($*--> "finally" ":" suite ($ 3)))
                             (if ($ 2)
                                 `(,($ 1) () ,($ 2))
                                 `(,($ 1) () ())))
                      ($*--> "finally" ":" suite `(() () ,($ 3))))
                  `(Try (body ,@($ 3))
                        (handlers ,@(car ($ 4)))
                        (orelse ,@(cadr ($ 4)))
                        (finalbody ,@(caddr ($ 4))))))

 (with_stmt ($*--> "with" (rep+/sep "," with_item #f) ":" suite `(With ,($ 2) ,@($ 4))))

 (with_item ($*--> test 
                   (opt ($*--> "as" expr ($ 2)))
                   (if ($ 2)
                       `(,($ 1) ,($ 2))
                       `(,($ 1) #f))))

 (except_clause ($*--> "except" 
                       (opt ($*--> test 
                                   (opt ($*--> "as" 'NAME (string->symbol ($ 2))))
                                   (if ($ 2) 
                                       `(,($ 1) ,($ 2)) 
                                       `(,($ 1) #f))))
                       (if ($ 2)
                        ($ 2)   
                        `(#f #f))))

 (suite (or simple_stmt
            ($*--> 'NEWLINE 'INDENT (rep+ ($*--> stmt (car ($ 1)))) 'DEDENT ($ 3))))
 
 (test (or ($*--> or_test (opt ($*--> "if" or_test "else" test `(,($ 2) ,($ 4))))
								(if ($ 2)
								 `(IfExp ,(car ($ 2)) ,($ 1) ,(cadr ($ 2)))
								 ($ 1)))
            lambdef))
 (test_nocond (or or_test lambdef_nocond))
 (lambdef ($*--> "lambda" 
                 (opt varargslist) 
                 ":"  
                 test
		(if ($ 2)
		 `(Lambda ,($ 2) ,($ 4))
		 `(Lambda (Arguments (args) 
				     (arg-types)
				     (vararg #f)
				     (kwonlyargs)
				     (kwonlyarg-types)
				     (kw_defaults)
				     (kwarg #f)
				     (defaults))
				     ,($ 4)))))
 (lambdef_nocond ($*--> "lambda" (opt varargslist) ":" test_nocond
			(if ($ 2)
			 `(Lambda ,($ 2) ,($ 4))
			 `(Lambda (Arguments (args) 
                                             (arg-types)
                                             (vararg #f)
                                             (kwonlyargs)
                                             (kwonlyarg-types)
                                             (kw_defaults)
                                             (kwarg #f)
                                             (defaults))
                                             ,($ 4)))))

 (or_test (or ($--> (seq or_test "or" and_test) `(BoolOp Or ,($ 1) ,($ 3)))
                 and_test))

 (and_test (or ($--> (seq and_test "and" not_test) `(BoolOp And ,($ 1) ,($ 3)))
                 not_test))

 (not_test (or ($--> (seq "not" not_test) `(UnaryOp Not ,($ 2)))
               comparison))

 (comparison (or ($*--> expr 
                        (rep+ ($*--> comp_op expr `(,($ 1) ,($ 2)))) 
                        `(Compare (left ,($ 1)) (ops ,@(car (recombine-comp ($ 2)))) (comparators ,@(cadr (recombine-comp ($ 2))))))
                 expr))
 #;(comparison (or ($--> (seq comparison comp_op expr) `(Compare (left ,($ 1)) ,($ 2) (comparators ,($ 3))))
                 expr))

 (comp_op ($--> (or ($--> "<" 'Lt)
		    ($--> ">" 'Gt)
		    ($--> "==" 'Eq)
		    ($--> ">=" 'GtE)
		    ($--> "<=" 'LtE)
		    ($--> "!=" 'NotEq)
		    ($--> "in" 'In)
		    ($*--> "not" "in" 'NotIn)
		    ($--> "is" 'Is)
		    ($*--> "is" "not" 'IsNot)) `(ops ,$$)))

 (star_expr ($--> (seq "*" expr) `(Starred ,($ 2))))

 (expr (or ($--> (seq expr ($--> "|" 'BitOr) xor_expr) `(BinOp ,($ 1) ,($ 2) ,($ 3)))
                 xor_expr))

 (xor_expr (or ($--> (seq xor_expr ($--> "^" 'BitXor) and_expr) `(BinOp ,($ 1) ,($ 2) ,($ 3)))
                 and_expr))

 (and_expr (or ($--> (seq and_expr ($--> "&" 'BitAnd) shift_expr) `(BinOp ,($ 1) ,($ 2) ,($ 3)))
                 shift_expr))

 (shift_expr (or ($--> (seq shift_expr (or ($--> "<<" 'LShift)
					   ($--> ">>" 'RShift)) arith_expr) `(BinOp ,($ 1) ,($ 2) ,($ 3)))
                 arith_expr))

 (arith_expr (or ($--> (seq arith_expr (or ($--> "+" 'Add)
					   ($--> "-" 'Sub)) term) `(BinOp ,($ 1) ,($ 2) ,($ 3)))
             term))

 (term (or ($--> (seq term (or ($--> "*" 'Mult)
		          ($--> "/" 'Div)
		          ($--> "%" 'Mod)
		          ($--> "//" 'FloorDiv)) factor) `(BinOp ,($ 1) ,($ 2) ,($ 3)))
          factor))

 (factor (or ($*--> (or ($--> "+" 'UAdd)
                        ($--> "-" 'USub)
                        ($--> "~" 'Invert)) factor `(UnaryOp ,($ 1) ,($ 2))) 
             power ))

 (power ($--> (seq atom 
                   (rep trailer) 
                   (opt ($--> (seq "**" factor) ($ 2))))
                   (if ($ 3)
                       `(BinOp ,(process-trailers ($ 1) ($ 2)) Pow, ($ 3))
                       (process-trailers ($ 1) ($ 2)))))
 (atom
  (or ($*--> "(" yield_expr ")" ($ 2))
      ($*--> "(" testlist_comp ")" (if (equal? 1 (length ($ 2))) (car ($ 2)) `(Tuple ,@($ 2))))
      ($*--> "(" testlist_comp_trail ")" `(Tuple ,($ 2)))
      ($*--> "(" testlist_comp_for ")" `(GeneratorExp ,@($ 2)))
      ($*--> "(" ")" '(Tuple))
      ($*--> "[" testlist_comp "]" `(List ,@($ 2)))
      ($*--> "[" testlist_comp_for "]" `(ListComp ,@($ 2)))
      ($*--> "[" "]" '(List))
      ($*--> "{" dictorsetmaker "}" ($ 2))
      ($*--> "{" "}" `(Dict (keys) (values)))
      ($--> (seq 'NAME) `(Name ,(string->symbol ($ 1))))
      ($--> 'NUMBER `(Num ,$$))
      ($*--> (rep+ 'STRING) (process-string ($ 1)))
      ($--> "..." '(Ellipsis))
      ($--> "None" `(NameConstant ,(string->symbol $$)))
      ($--> "True" `(NameConstant ,(string->symbol $$)))
      ($--> "False" `(NameConstant ,(string->symbol $$)))))

 (testlist_comp_for ($*--> (or test star_expr) comp_for `(,($ 1) ,@($ 2))))
 (testlist_comp  ($*--> (rep+/sep "," (or test star_expr) #f) 
                        (opt ",")
             (if (equal? 1 (length ($ 1))) `( ,@($ 1)) ($ 1))))
 (testlist_comp_trail  ($*--> (or test star_expr) 
                              ","  
                              ($ 1)))
                              
 (trailer
  (or ($*--> "(" arglist ")" `(Call ,@($ 2)))
      ($*--> "(" ")" `(Call (args ) (keywords ) (starargs #f) (kwargs #f)))
      ($*--> "[" subscriptlist "]"  `(Subscript ,($ 2)))
      ($*--> "." 'NAME `(Attribute ,(string->symbol ($ 2))))))

 (subscriptlist (or ($*--> subscript ($ 1))
                    ($*--> (rep+/sep "," index #t) `(Index (Tuple ,@($ 1))))
                    ($*--> (rep+/sep "," subscript #t) `(ExtSlice ,@($ 1)))))

 (index ($*--> test ($ 1)))
 (subscript (or ($*--> test `(Index ,($ 1)))
                ($*--> test ":" test (opt sliceop) (if ($ 4) `(Slice ,($ 1) ,($ 3) ,($ 4))  `(Slice ,($ 1) ,($ 3) #f)))
                ($*--> test ":" (opt sliceop)      (if ($ 3) `(Slice ,($ 1) #f ,($ 3))      `(Slice ,($ 1) #f #f)))
                ($*--> ":" test (opt sliceop)      (if ($ 3) `(Slice #f ,($ 2) ,($ 3))      `(Slice #f ,($ 2) #f )))
                ($*--> ":" (opt sliceop)           (if ($ 2) `(Slice #f #f ,($ 2))          `(Slice #f #f #f)))))
                        
 (sliceop ($*--> ":" 
                 (opt test)
                 (if ($ 2)
                  ($ 2)
                  #f )))

 (exprlist
  ($*--> (or expr star_expr) 
         ($--> (rep ($*--> "," (or expr star_expr) ($ 2))) $$)
         (opt ",")  
          (if (empty? ($ 2))
         `( ,($ 1) )
          `(,($ 1) ,@($ 2)))))

 (testlist ($*--> (rep+/sep "," test #f) 
                  (opt ",") 
                  (cond
                    [($ 2) `(Tuple ,@($ 1))]
                    [(equal? 1 (length ($ 1))) (car ($ 1))]
                    [else `(Tuple ,@($ 1))])))
 #;(testlist ($*--> test 
                  ($--> (rep ($*--> "," test ($ 2))) $$)
                  (opt ",")
		  (if (empty? ($ 2))
		   ($ 1)
		   `(Tuple ,($ 1) ,@($ 2)))))

 (dictorsetmaker
  (or ($*--> test
             ":"
             test
             comp_for
             `(DictComp ,($ 1) ,($ 3) ,@($ 4)))
      ($--> ($*--> (rep+/sep "," ($*--> test ":" test `(,($ 1) ,($ 3))) #t) 
                   (recombine (car $$)))
            `(Dict (keys ,@(car $$)) (values ,@(cadr $$))))
      ($*--> test comp_for `(SetComp ,($ 1) ,@($ 2)))
      ($--> (rep+/sep "," test #t) `(Set ,@$$))))

 (classdef ($*--> "class" 
                  'NAME 
                  (opt ($*--> "(" (opt arglist) ")" (if ($ 2)
							($ 2) 
                                                        `((bases) (keywords) (starargs #f) (kwargs #f)))))
                  ":"
                  suite (if ($ 3)
			 `(ClassDef (name ,(string->symbol ($ 2))) (bases ,@(cdar ($ 3))) ,@(cdr ($ 3)) (body ,@($ 5)) (decorator_list))
			 `(ClassDef (name ,(string->symbol ($ 2))) (bases) (keywords) (starargs #f) (kwargs #f) (body ,@($ 5)) (decorator_list)))))

 (arglist ($--> (or ($--> (rep+/sep "," (or ($*--> test 
                                                   (opt comp_for)
                                                   (if ($ 2)
                                                    `("a" (GeneratorExp ,($ 1) ,($ 2)))
                                                    `("a" ,($ 1))))
                                            ($*--> test 
                                                   "=" 
                                                   test
                                                   `("k" (,(cadr ($ 1)) ,($ 3)))))
                                    #t)
                           `( ,@(process-args-list $$) (#f) (#f) ))
                    ($*--> (rep/sep "," (or ($*--> test 
                                                   (opt comp_for)
                                                   (if ($ 2)
                                                    `("a" (GeneratorExp ,($ 1) ,($ 2)))
                                                    `("a" ,($ 1))))
                                            ($*--> test 
                                                   "=" 
                                                   test
                                                   `("k" (,(cadr ($ 1)) ,($ 3))))) 
                                         #f)
                           (or ($*--> "," "*" test ($ 3))
                               ($*--> "*" test ($ 2)))
                           (opt ($*--> "," (rep+/sep "," (or ($*--> test 
                                                   (opt comp_for)
                                                   (if ($ 2)
                                                    `("a" (GeneratorExp ,($ 1) ,($ 2)))
                                                    `("a" ,($ 1))))
                                            ($*--> test 
                                                   "=" 
                                                   test
                                                   `("k" (,(cadr ($ 1)) ,($ 3))))) 
                                         #f) 
                                       ($ 2)))
                           (opt ($*--> "," "**" test ($ 3))) 
                           `(,@(process-args-list (append ($ 1) (if ($ 3) ($ 3) '())))
                             (,($ 2))
                             ,(if ($ 4) `(,($ 4)) '(#f))))
                    ($*--> (rep/sep "," (or ($*--> test 
                                                   (opt comp_for)
                                                   (if ($ 2)
                                                    `("a" (GeneratorExp ,($ 1) ,($ 2)))
                                                    `("a" ,($ 1))))
                                            ($*--> test
                                                   "=" 
                                                   test
                                                   `("k" (,(cadr ($ 1)) ,($ 3))))) 
                                         #f)
                           ( or ($*--> "," "**" test ($ 3))
                                ($*--> "**" test ($ 2)))
                           `(,@(process-args-list ($ 1)) (#f) (,($ 2)))))
			   `(,`(args             ,@($ 0)) 
			     ,`(keywords         ,@($ 1)) 
			     ,`(starargs         ,@($ 2)) 
			     ,`(kwargs           ,@($ 3)))))

 (argument (or ($*--> test 
                      (opt comp_for)
                      (if ($ 2)
                       `(GeneratorExp ,($ 1) ,($ 2))
                       ($ 1)))
               ($*--> test 
                      "=" 
                      test
                      `( ,(cadr ($ 1)) ,($ 3)))))

 (comp_iter (or comp_for comp_if))

 (comp_for ($*--> "for" exprlist "in" or_test (opt comp_iter)
					(if ($ 5)
					 `((for ,@($ 2) in ,($ 4) if ,@($ 5)))
					 `((for ,@($ 2) in ,($ 4) if)))))
 (comp_if ($*--> "if" test_nocond (opt comp_iter)
					(if ($ 3)
					 `(,($ 2) ,@($ 3))
					 `(,($ 2)))))
 (encoding_decl 'NAME)
 (yield_expr ($*--> "yield" 
                    (opt yield_arg)  
                    (if ($ 2)
                    ($ 2)
                    '(Yield))))
 (yield_arg (or ($*--> "from" test `(YieldFrom ,($ 2)))
                ($*--> testlist `(Yield ,($ 1))))))
